; $.JSW1   001100 002f7e
;
; Reassembly by TobyLobster, 2021
;
; Based on the cassette version (http://www.level7.org.uk/miscellany/jet-set-willy-disassembly.txt)
; but this file has been modified to assemble byte for byte identically to the SSD here:
; http://www.bbcmicro.co.uk/game.php?id=439
;

; variables
life_y                                              = $4d
space_tile                                          = $4e
swimming_pool_item_collected                        = $4f
room_data_address                                   = $50
room_data_address_low                               = $50
room_data_address_high                              = $51
room_data_offset                                    = $52
bits_remaining_in_room_data_byte                    = $53
room_data_byte                                      = $54
player_room                                         = $55
pages_of_tile_table_remaining_when_finding_conveyor = $56
game_timer                                          = $57
conveyor_length                                     = $58
conveyor_screen_address_low                         = $59
conveyor_screen_address_high                        = $5a
rope_position_relative_to_centre                    = $5b
rope_velocity_relative_to_centre                    = $5c
rope_end_x                                          = $5d
rope_end_y                                          = $5e
rope_position                                       = $5f
tile_address1                                       = $60
tile_address_low1                                   = $60
tile_address_high1                                  = $61
where_player_fell_from                              = $62
player_killed                                       = $63
player_is_jumping                                   = $64
player_jump_timer                                   = $65
items_in_room_minus_one                             = $66
item_number                                         = $67
tile1                                               = $68
player_conveyor_direction                           = $69
conveyor_direction                                  = $6a
player_on_slope                                     = $6b
slope_direction                                     = $6c
do_triangle_ends                                    = $6d
length1                                             = $6e
room_contains_rope                                  = $6f
x1                                                  = $70
tile_x                                              = $70
y                                                   = $71
tile_y                                              = $71
tile_type                                           = $72
length2                                             = $74
start_x                                             = $75
previous_x                                          = $75
height1                                             = $76
previous_y1                                         = $76
x_delta                                             = $77
y_delta                                             = $78
width                                               = $79
enemy_to_consider1                                  = $79
count                                               = $7a
number_of_frames                                    = $7a
block_y_delta                                       = $7a
rope_pixel_to_consider                              = $7a
row_length                                          = $7a
item_state                                          = $7b
previous_speed                                      = $7b
enemy_x                                             = $7b
next_y                                              = $7b
sprite_frames                                       = $7b
tmp                                                 = $7b
next_tile_offset                                    = $7b
conveyor_sections_remaining_to_update               = $7b
tile2                                               = $7b
life_colour                                         = $7b
player_y_fraction                                   = $7b
mod_three                                           = $7b
previous_tile_address_low                           = $7b
rope_pixel_touched                                  = $7b
direction                                           = $7c
triangle_direction                                  = $7d
x_skip                                              = $7e
triangle_length                                     = $7f
height2                                             = $80
room                                                = $81
conveyor_colour                                     = $81
previous_y2                                         = $81
previous_tile_type                                  = $81
add_first_and_last                                  = $82
direction_base                                      = $83
unpacked_sprite_address_low                         = $84
unpacked_sprite_address                             = $84
unpacked_sprite_address_high                        = $85
unpacked_sprite_offset                              = $86
enemies_on_screen                                   = $87
unpacked_byte_two                                   = $88
sprite_colour                                       = $89
enemy_to_consider2                                  = $8a
player_started_jump                                 = $8b
player_x                                            = $8c
player_y                                            = $8d
player_horizontal_speed                             = $8e
sprite_address_low1                                 = $90
tile_address_low2                                   = $90
sprite_address                                      = $90
rope_pixels_screen_address                          = $90
rope_pixels_screen_address_low                      = $90
screen_address                                      = $90
tile_address2                                       = $90
screen_address_low                                  = $90
rope_pixels_screen_address_high                     = $91
tile_address_high2                                  = $91
sprite_address_high1                                = $91
screen_address_high                                 = $91
sprite_address_low2                                 = $92
sprite_address_high2                                = $93
sprite_size_in_bytes                                = $94
sprite_width                                        = $95
rows_to_check                                       = $96
previous_sprite_address_high                        = $96
packed_byte1                                        = $96
x2                                                  = $96
value                                               = $96
rope_pixel_position                                 = $96
arrow                                               = $96
lives_remaining_to_plot                             = $96
times_three                                         = $96
walls                                               = $96
buffer_offset                                       = $97
previous_sprite_address_low                         = $97
life_x                                              = $97
buffer_y                                            = $97
invert                                              = $97
start_of_word                                       = $97
bit_for_item                                        = $97
rope_pixel_x                                        = $97
packed_byte2                                        = $97
seven                                               = $98
player_entered_room_falling_too_far                 = $9a
player_lives                                        = $9b
player_not_plotted                                  = $9c
out_of_time                                         = $9d
house_clear                                         = $9e
player_rope_pixel                                   = $9f
melody_active                                       = $028a
to_title_screen                                     = $0400
sound_definitions                                   = $0880
sound_0_pitch                                       = sound_definitions + 4
irq_counter                                         = $08bf
rope_x_delta_table                                  = $0900
rope_y_delta_table                                  = $0928
rope_pixels_screen_address_low_table                = $0950
rope_pixels_screen_address_high_table               = $0972
rope_pixels_x                                       = $0994
rope_pixels_y                                       = $09b6
background_tiles_colours                            = $09f1
background_tiles_sprites                            = $09f7
enemies_sprite                                      = $0a00
enemies_unpacked_sprite_offset                      = $0a09
enemies_direction                                   = $0a12
enemies_x                                           = $0a1b
player_x_in_enemies                                 = $0a1b
enemies_y                                           = $0a24
player_y_in_enemies                                 = $0a24
enemies_speed                                       = $0a2d
player_speed                                        = $0a2d
enemies_minimum                                     = $0a36
enemies_maximum                                     = $0a3f
enemies_colour                                      = $0a48
enemies_previous_tile_address_low                   = $0a51
enemies_previous_speed                              = $0a5a
enemies_need_replot                                 = $0a63
enemy_has_moved                                     = $0a6c
arrow_timer                                         = $0a7c
arrow_y                                             = $0a7e
items_colour                                        = $0a80
items_screen_address_low                            = $0a8c
items_screen_address_high                           = $0a98
exit_rooms                                          = $0aa4
items_tile_address_low                              = $0aa8
items_tile_address_high                             = $0ab4
screen_address_lookup_table                         = $0ac0

screen_memory_start                                 = $3000
packed_enemy_sprites                                = $5a00
tile_table                                          = $6e00
space_sprite                                        = $7000
player_background_buffer                            = $7020
unpacked_conveyor_sprite                            = $7080
unpacked_background_sprite                          = $70a0
unpacked_background_sprites                         = $70a0
unpacked_sprites                                    = $7100
unpacked_enemy_sprites                              = $7300
background_sprite_data                              = $7800
OSWRCH                                              = $ffee     ; for CLS
OSBYTE                                              = $fff4     ; for keypress
OSCLI                                               = $fff7     ; for *RUN JSW1.5

to_initialise_arrows                                = $0b1b
to_initialise_room_background_tiles_and_title       = $0b18
to_write_status_line                                = $0b00
to_handle_rope_time_and_events                      = $0b03
to_mark_enemies_that_overlap_player                 = $0b0c
to_update_arrows                                    = $0b0f
to_play_sound_number_a                              = $0b27
to_collect_item                                     = $0b06


*= $1100

to_reset_items
    jmp reset_items                                 ;

to_animate_game_over_boot
    jmp animate_game_over_boot                      ;

to_update_game
    jmp update_game                                 ;

to_initialise_enemies                               ; [unused]
    jmp initialise_enemies                          ;

to_initialise_room
    jmp initialise_room                             ;

to_plot_sprite
    jmp plot_sprite                                 ;

to_get_x_bits_of_room_data
    jmp get_x_bits_of_room_data                     ;

to_calculate_tile_address_for_enemy_X
    jmp calculate_tile_address_for_enemy_X          ;

to_calculate_screen_address
    jmp calculate_screen_address                    ;

; ***************************************************************************************
initialise_room
    jsr initialise_room_data                        ;
    jsr initialise_enemies                          ;
    jsr to_initialise_arrows                        ;
    jmp calculate_screen_address_of_conveyor        ;

entry_horizontal_speed
    !byte 0
entry_jump_timer
    !byte 0
entry_x
    !byte 0
entry_y
    !byte 0
entry_is_jumping
    !byte 0

; ***************************************************************************************
initialise_room_data
    lda #0                                          ;
    sta room_data_offset                            ;
    sta bits_remaining_in_room_data_byte            ;
    sta player_rope_pixel                           ;
    sta rope_position_relative_to_centre            ;
    sta game_timer                                  ;
    ldx player_room                                 ;
    jsr calculate_room_data_address                 ;
    lda #12                                         ; CLS
    jsr OSWRCH                                      ;
    jsr initialise_room_items_and_exits             ;
    jsr to_initialise_room_background_tiles_and_title ;
    lda #$ff                                        ;
    sta item_number                                 ;
    lda #$d2                                        ;
    sta rope_position                               ;
    lda #1                                          ;
    sta rope_velocity_relative_to_centre            ;
    sta player_not_plotted                          ; Mark player as not needing to be unplotted
    lda out_of_time                                 ;
    sta player_killed                               ;
    lda player_horizontal_speed                     ; Store how player entered room
    sta entry_horizontal_speed                      ;
    lda player_jump_timer                           ;
    sta entry_jump_timer                            ;
    lda player_x_in_enemies                         ;
    sta entry_x                                     ;
    lda player_y_in_enemies                         ;
    sta entry_y                                     ;
    sta where_player_fell_from                      ;
    lda player_is_jumping                           ;
    sta entry_is_jumping                            ;
    lda #0                                          ;
    sta $73                                         ; [unused variable]
    sta tile_x                                      ;
    sta tile_y                                      ;
    sta tile_type                                   ;
    jsr to_write_status_line                        ;
    jsr wipe_tile_table                             ;
initialise_background_scenery_loop
    ldy #$ff                                        ;
calculate_routine_number_loop                       ; Reading two bits at a time, count 11 as meaning +3
    iny                                             ;
    ldx #2                                          ;
    jsr get_x_bits_of_room_data                     ;
    cmp #3                                          ;
    beq calculate_routine_number_loop               ;
    sta mod_three                                   ;
    sty times_three                                 ;
    tya                                             ;
    asl                                             ;
    asl                                             ;
    adc mod_three                                   ;
    sec                                             ;
    sbc times_three                                 ;
    cmp #6                                          ;
    beq leave8                                      ;
    asl                                             ;
    tax                                             ;
    lda background_initialisation_routines_address_table,X      ;
    sta background_initialisation_routine_address_low           ;
    lda background_initialisation_routines_address_table + 1,X  ;
    sta background_initialisation_routine_address_high          ;

background_initialisation_routine_address_low = * + 1
background_initialisation_routine_address_high = * + 2
    jsr $1111                                       ; [overwritten before use] JSR background_initialisation_routine_address
    jmp initialise_background_scenery_loop          ;
null_routine
leave8
    rts                                             ;

; ***************************************************************************************
get_x_bits_of_room_data
    sty tmp                                         ;
    lda #0                                          ;
    sta value                                       ;
get_x_bits_of_room_data_loop
    dec bits_remaining_in_room_data_byte            ;
    bpl bits_still_remaining                        ;
    lda #7                                          ;
    sta bits_remaining_in_room_data_byte            ;
    ldy room_data_offset                            ;
    lda (room_data_address),Y                       ;
    sta room_data_byte                              ;
    inc room_data_offset                            ;
bits_still_remaining
    lsr room_data_byte                              ;
    rol value                                       ;
    dex                                             ;
    bne get_x_bits_of_room_data_loop                ;
    lda value                                       ;
    ldy tmp                                         ;
    rts                                             ;

; ***************************************************************************************
background_initialisation_routines_address_table
    !word set_tile_type                             ; 0 00
    !word set_tile_x_and_y                          ; 1 01
    !word add_straight_line_of_tiles                ; 2 10
    !word add_block_of_tiles                        ; 3 11 00
    !word add_series_of_tiles                       ; 4 11 01
    !word add_diagonal_line_of_tiles                ; 5 11 10
    !word null_routine                              ; 6 11 11 00
    !word null_routine                              ; 7 11 11 01 - [unused]
    !word add_triangle_of_tiles                     ; 8 11 11 10

; ***************************************************************************************
set_tile_type
    ldx #3                                          ; Get three bits of room data for tile type
    jsr get_x_bits_of_room_data                     ;
    sta tile_type                                   ;
    rts                                             ;

; ***************************************************************************************
set_tile_x_and_y
    ldx #5                                          ; Get five bits of room data for x position
    jsr get_x_bits_of_room_data                     ;
    sta tile_x                                      ;
    ldx #4                                          ; Get five bits of room data for y position
    jsr get_x_bits_of_room_data                     ;
    sta tile_y                                      ;
    rts                                             ;

; ***************************************************************************************
add_straight_line_of_tiles
    lda #1                                          ; Add first and last tiles
    ldx #0                                          ; Get one bit of room data for direction
    ldy #5                                          ; Get five bits of room data for length of run
    jsr add_line_of_tiles                           ;
    rts                                             ;

; ***************************************************************************************
add_diagonal_line_of_tiles
    lda tile_type                                   ;
    sta previous_tile_type                          ;
    lda #2                                          ; SLOPE
    sta tile_type                                   ;
    lda #1                                          ; Add first and last tiles
    ldx #8                                          ; Get one bit of room data for diagonal direction
    ldy #4                                          ; Get four bits of room data
    jsr add_line_of_tiles                           ;
    lda previous_tile_type                          ;
    sta tile_type                                   ;
    lda tile_x                                      ;
    clc                                             ;
    adc x_delta                                     ;
    sta tile_x                                      ;
    rts                                             ;

; ***************************************************************************************
add_series_of_tiles
    ldx #4                                          ;
    jsr get_x_bits_of_room_data                     ; Get four bits of room data for number of tiles
    sta length1                                     ;
add_series_of_tiles_loop                            ; For each tile,
    ldx #5                                          ;
    jsr get_x_bits_of_room_data                     ; Get five bits of room data for x co-ordinate
    sta tile_x                                      ;
    ldx #4                                          ;
    jsr get_x_bits_of_room_data                     ; Get four bits of room data for y co-ordinate
    sta tile_y                                      ;
    jsr add_background_tile                         ;
    dec length1                                     ;
    bpl add_series_of_tiles_loop                    ;
    lda #0                                          ;
    sta tile_x                                      ;
    sta tile_y                                      ;
    rts                                             ;

; ***************************************************************************************
add_block_of_tiles
    ldx #5                                          ;
    jsr get_x_bits_of_room_data                     ; Get five bits of room data for width of block
    sta width                                       ;
    lda tile_x                                      ;
    sta start_x                                     ;
    lda tile_y                                      ;
    sta height1                                     ;
    ldx #4                                          ;
    jsr get_x_bits_of_room_data                     ; Get four bits of room data for y end
    sta tile_y                                      ;
    lda height1                                     ;
    sec                                             ;
    sbc tile_y                                      ;
    ldx #1                                          ;
    bcs skip_inversion2                             ;
    eor #$ff                                        ;
    adc #1                                          ;
    ldx #$ff                                        ;
skip_inversion2
    sta height1                                     ;
    stx block_y_delta                               ;
add_block_of_tiles_loop
    lda #0                                          ; Add tiles from left to right
    sta direction                                   ;
    lda width                                       ;
    sta length2                                     ;
    lda start_x                                     ;
    sta tile_x                                      ;
    lda #1                                          ; Add first and last tiles
    ldx #$80                                        ; Use previous direction
    jsr add_line_of_tiles                           ;
    lda tile_y                                      ;
    clc                                             ;
    adc block_y_delta                               ;
    sta tile_y                                      ;
    dec height1                                     ;
    bpl add_block_of_tiles_loop                     ;
    lda tile_y                                      ;
    sec                                             ;
    sbc block_y_delta                               ;
    sta tile_y                                      ;
    lda tile_x                                      ;
    clc                                             ;
    adc x_delta                                     ;
    sta tile_x                                      ;
    rts                                             ;

; ***************************************************************************************
add_triangle_of_tiles
    lda tile_x                                      ;
    sta previous_x                                  ;
    lda tile_y                                      ;
    sta previous_y1                                 ;
    ldx #1                                          ;
    jsr get_x_bits_of_room_data                     ; Get one bit of room data for triangle direction
    ldx #1                                          ;
    stx do_triangle_ends                            ;
    sta triangle_direction                          ;
    tay                                             ;
    beq skip_x_inversion                            ;
    ldx #$ff                                        ;
skip_x_inversion
    stx x_skip                                      ;
    ldx #4                                          ;
    jsr get_x_bits_of_room_data                     ; Get four bits of room data for triangle height
    sta row_length                                  ;
    sta triangle_length                             ;
    sec                                             ;
    sbc tile_y                                      ;
    sta height2                                     ;
    bcs skip_y_inversion                            ;
    eor #$ff                                        ;
    adc #1                                          ;
    sta height2                                     ;
    dec do_triangle_ends                            ;
    lda row_length                                  ;
    ldx tile_y                                      ;
    sta tile_y                                      ;
    stx row_length                                  ;
    jmp add_triangle_of_tiles_loop                  ;
skip_y_inversion
    ldx height2                                     ;
    lda x_skip                                      ;
    eor #$ff                                        ;
    adc #0                                          ;
    sta x_skip                                      ;
    bmi +                                           ;
    txa                                             ;
    eor #$ff                                        ;
    tax                                             ;
    inx                                             ;
+
    txa                                             ;
    clc                                             ;
    adc tile_x                                      ;
    sta tile_x                                      ;
add_triangle_of_tiles_loop
    lda #1                                          ; Add tiles from right to left
    sta direction                                   ;
    lda row_length                                  ;
    sta length2                                     ;
    lda tile_y                                      ;
    sta previous_y2                                 ;
    lda #1                                          ; Add first and last tiles
    ldx #$80                                        ; Use previous direction
    jsr add_line_of_tiles                           ;
    lda previous_y2                                 ;
    sta tile_y                                      ;
    lda tile_x                                      ;
    clc                                             ;
    adc x_skip                                      ;
    sta tile_x                                      ;
    dec row_length                                  ;
    dec height2                                     ;
    bpl add_triangle_of_tiles_loop                  ;
    lda previous_x                                  ;
    sta tile_x                                      ;
    lda previous_y1                                 ;
    sta tile_y                                      ;
    lda triangle_direction                          ;
    sta direction                                   ;
    lda triangle_length                             ;
    sta length2                                     ;
    lda tile_type                                   ;
    sta previous_tile_type                          ;
    lda #2                                          ; WALL
    sta tile_type                                   ;
    lda triangle_direction                          ; Determine whether to add first and last tiles
    eor slope_direction                             ; based on whether triangle faces same as room slope
    eor do_triangle_ends                            ;
    ldx #$88                                        ; Use previous diagonal direction
    jsr add_line_of_tiles                           ;
    lda previous_tile_type                          ;
    sta tile_type                                   ;
    lda tile_x                                      ;
    clc                                             ;
    adc x_delta                                     ;
    sta tile_x                                      ;
    rts                                             ;

; ***************************************************************************************
add_line_of_tiles
    sta add_first_and_last                          ;
    stx direction_base                              ;
    txa                                             ;
    bmi use_previous_direction                      ;
    ldx #1                                          ;
    jsr get_x_bits_of_room_data                     ;
    sta direction                                   ;
    tya                                             ;
    tax                                             ;
    jsr get_x_bits_of_room_data                     ;
    sta length2                                     ;
use_previous_direction
    lda direction_base                              ;
    ldx tile_y                                      ;
    and #$7f                                        ;
    clc                                             ;
    adc direction                                   ;
    sta direction                                   ;
    bne vertical_line                               ;
    ldx tile_x                                      ;
vertical_line
    lda length2                                     ;
    stx tmp                                         ;
    sec                                             ;
    sbc tmp                                         ;
    bcs skip_inversion3                             ;
    eor #$ff                                        ;
    clc                                             ;
    adc #1                                          ;
    inc direction                                   ;
    inc direction                                   ;
skip_inversion3
    sta length2                                     ;
    beq add_last_tile                               ;
    ldx direction                                   ;
    lda directions_x,X                              ;
    sta x_delta                                     ;
    lda directions_y,X                              ;
    sta y_delta                                     ;
add_line_of_tiles_loop
    lda add_first_and_last                          ;
    beq skip_first                                  ;
    jsr add_background_tile                         ;
skip_first
    lda tile_x                                      ;
    clc                                             ;
    adc x_delta                                     ;
    sta tile_x                                      ;
    lda tile_y                                      ;
    clc                                             ;
    adc y_delta                                     ;
    sta tile_y                                      ;
    dec length2                                     ;
    bne add_line_of_tiles_loop                      ;
add_last_tile
    lda add_first_and_last                          ;
    beq skip_last                                   ;
    jsr add_background_tile                         ;
skip_last
    rts                                             ;

; ***************************************************************************************
add_background_tile
    ldy tile_type                                   ;
    ldx background_tiles_colours,Y                  ;
    lda background_tiles_sprites,Y                  ;
    jsr plot_background_sprite                      ;
    jsr set_tile_table_for_background               ;
    rts                                             ;

directions_x
    !byte $01, $00, $ff, $00                        ; [Last two bytes of all four tables are unused?]
directions_y
    !byte $00, $01, $00, $ff
diagonal_directions_x
    !byte $01, $ff, $01, $ff
diagonal_directions_y
    !byte $01, $01, $ff, $ff

; ***************************************************************************************
unpack_enemy_sprites
    lda #<unpacked_enemy_sprites                    ;
    sta unpacked_sprite_address_low                 ;
    lda #>unpacked_enemy_sprites                    ;
    sta unpacked_sprite_address_high                ;

    lda #8                                          ; The player sprite has 8 frames
    sta unpacked_sprite_offset                      ;
    lda enemies_on_screen                           ;
    sta enemy_to_consider1                          ;
    beq leave9                                      ;
unpack_enemy_sprites_loop
    ldx enemy_to_consider1                          ;
    cpx enemies_on_screen                           ;
    beq first_enemy                                 ; If this isn't the first enemy,
    ldy enemies_on_screen                           ;
check_if_enemy_already_unpacked                     ; has its sprite already been used?
    lda enemies_sprite,Y                            ;
    cmp enemies_sprite,X                            ;
    bne different_sprite                            ;
    lda enemies_unpacked_sprite_offset,Y            ;
    sta enemies_unpacked_sprite_offset,X            ;
    bpl consider_next_enemy1                        ;
different_sprite
    dey                                             ;
    cpy enemy_to_consider1                          ;
    bne check_if_enemy_already_unpacked             ;
first_enemy                                         ; If not, unpack its sprite
    ldy enemies_sprite,X                            ;
    lda unpacked_sprite_offset                      ;
    sta enemies_unpacked_sprite_offset,X            ;
    lda enemy_sprites_frames,Y                      ;
    sta number_of_frames                            ;
    clc                                             ;
    adc unpacked_sprite_offset                      ;
    sta unpacked_sprite_offset                      ;
    lda enemy_sprites_frame_offsets,Y               ;
    lsr                                             ;
    ror tmp                                         ;
    lsr                                             ;
    ror tmp                                         ;
    lsr                                             ;
    ror tmp                                         ;
    clc                                             ;
    adc #>packed_enemy_sprites                      ;
    sta sprite_address_high1                        ;
    lda tmp                                         ;
    and #$e0                                        ;
    sta sprite_address_low1                         ;
unpack_frames_loop
    jsr unpack_enemy_sprite                         ;
    dec number_of_frames                            ;
    bne unpack_frames_loop                          ;
consider_next_enemy1
    dec enemy_to_consider1                          ;
    bne unpack_enemy_sprites_loop                   ;
leave9
    rts                                             ;

!if (<packed_enemy_sprites != 0) {
    !error "packed enemy sprites need to be page aligned"
}

; ***************************************************************************************
unpack_enemy_sprite
    ldy #0                                          ;
unpack_enemy_sprite_loop
    lda (sprite_address),Y                          ;
    jsr unpack_byte_of_sprite_data                  ;
    ldx unpacked_byte_two                           ;
    sta unpacked_byte_two                           ;
    txa                                             ;
    sta (unpacked_sprite_address),Y                 ;
    inc unpacked_sprite_address_low                 ;
    lda unpacked_byte_two                           ;
    sta (unpacked_sprite_address),Y                 ;
    iny                                             ;
    cpy #$20                                        ;
    bne unpack_enemy_sprite_loop                    ;
    lda sprite_address_low1                         ;
    clc                                             ;
    adc #$20                                        ;
    sta sprite_address_low1                         ;
    bcc +                                           ;
    inc sprite_address_high1                        ;
+
    lda unpacked_sprite_address_low                 ;
    clc                                             ;
    adc #$20                                        ;
    sta unpacked_sprite_address_low                 ;
    bcc +                                           ;
    inc unpacked_sprite_address_high                ;
+
    rts                                             ;

; ***************************************************************************************
enemy_sprites_frames
    !byte $08, $01, $01, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $02 ; # Slot 0 is [unused] ; eight frames suggests player
    !byte $02, $02, $02, $04, $04, $08, $08, $08, $02, $02, $04, $08, $04, $04, $04, $01 ; # Last two slots, for sprites $2a and $2b, aren't used
    !byte $01, $02, $04, $04, $08, $08, $04, $04, $04, $02, $02, $02

enemy_sprites_frame_offsets
    !byte $00, $00, $01, $02, $06, $0a, $0e, $12, $16, $1a, $1e, $22, $26, $2a, $2e, $32
    !byte $34, $36, $38, $3a, $3e, $42, $4a, $52, $5a, $5c, $5e, $62, $6a, $6e, $72, $76
    !byte $77, $78, $7a, $7e, $82, $8a, $92, $96, $9a, $9e, $a0, $a2

; ***************************************************************************************
unpack_byte_of_sprite_data
    sta packed_byte1                                ;
    and #$f0                                        ;
    sta tmp                                         ;
    lsr                                             ;
    lsr                                             ;
    lsr                                             ;
    lsr                                             ;
    ora tmp                                         ;
    sta unpacked_byte_two                           ;
    lda packed_byte1                                ;
    and #$0f                                        ;
    sta tmp                                         ;
    asl                                             ;
    asl                                             ;
    asl                                             ;
    asl                                             ;
    ora tmp                                         ;
    rts                                             ;

; ***************************************************************************************
calculate_screen_address
    and #$fc                                        ;
    asl                                             ;
    rol rope_pixels_screen_address_high             ;
    sta screen_address_low                          ;
    txa                                             ;
    and #7                                          ;
    clc                                             ;
    adc screen_address_low                          ;
    sta screen_address_low                          ;
    txa                                             ;
    lsr                                             ;
    lsr                                             ;
    and #$fe                                        ;
    tax                                             ;
    lda screen_address_low                          ;
    clc                                             ;
    adc screen_address_lookup_table + 1,X           ;
    sta screen_address_low                          ;
    lda screen_address_high                         ;
    and #1                                          ;
    adc screen_address_lookup_table,X               ;
    adc #>screen_memory_start                       ; start of screen memory
    sta screen_address_high                         ;
    rts                                             ;

!if (<screen_memory_start != 0) {
    !error "Screen memory should be page aligned"
}

; ***************************************************************************************
plot_sprite
    jsr calculate_screen_address                    ;
    lda sprite_address_high2                        ;
    sta plot_sprite_address_high                    ;
    lda sprite_address_low2                         ;
    sta plot_sprite_address_low                     ;
    ldx sprite_size_in_bytes                        ;
plot_sprite_group_loop
    ldy sprite_width                                ;
    sec                                             ;
plot_sprite_loop
plot_sprite_address_low = * + 1
plot_sprite_address_high = * + 2
    lda $1111,X                                     ; [address overwritten before use: LDA plot_sprite_address,X]
    and sprite_colour                               ;
    sta (screen_address),Y                          ;
    dex                                             ;
    tya                                             ;
    sbc #8                                          ;
    tay                                             ;
    bcs plot_sprite_loop                            ;
    txa                                             ;
    bmi leave10                                     ;
plot_sprite_skipping_first_column
    inc screen_address_low                          ;
    lda screen_address_low                          ;
    bit seven                                       ;
    bne plot_sprite_group_loop                      ;
    sec                                             ;
    sbc #8                                          ;
    sta screen_address_low                          ;
    lda screen_address_high                         ;
    clc                                             ;
    adc #2                                          ;
    sta screen_address_high                         ;
    bpl plot_sprite_group_loop                      ;
leave10
    rts                                             ;

; ***************************************************************************************
calculate_background_sprite_address
    asl                                             ;
    rol sprite_address_high1                        ;
    asl                                             ;
    rol sprite_address_high1                        ;
    asl                                             ;
    rol sprite_address_high1                        ;
    sta sprite_address_low1                         ;
    lda sprite_address_high1                        ;
    and #7                                          ;
    clc                                             ;
    adc #>background_sprite_data                    ;
    sta sprite_address_high1                        ;
    ldy #7                                          ;
    rts                                             ;

!if (<background_sprite_data != 0) {
    !error "background_sprite_data must be aligned to a page"
}

; ***************************************************************************************
plot_background_sprite
    jsr calculate_background_sprite_address         ;
    lda colour_mask_values,X                        ;
    sta sprite_colour                               ;
unpack_background_sprite_loop
    lda (sprite_address),Y                          ;
    jsr unpack_byte_of_sprite_data                  ;
    sta unpacked_background_sprite + 8,Y            ;
    lda unpacked_byte_two                           ;
    sta unpacked_background_sprite,Y                ;
    dey                                             ;
    bpl unpack_background_sprite_loop               ;
    lda #$0f                                        ;
    sec                                             ;
    sbc tile_y                                      ;
    asl                                             ;
    asl                                             ;
    asl                                             ;
    tax                                             ;
    lda tile_x                                      ;
    asl                                             ;
    asl                                             ;
    asl                                             ;
    jsr calculate_screen_address                    ;
    ldy #$0f                                        ;
plot_background_sprite_loop
    lda unpacked_background_sprite,Y                ;
    and sprite_colour                               ;
    sta (screen_address),Y                          ;
    dey                                             ;
    bpl plot_background_sprite_loop                 ;
    rts                                             ;

; ***************************************************************************************
colour_mask_values
    !byte $00, $0f, $f0, $ff

; ***************************************************************************************
calculate_enemy_sprite_address
    ldy enemies_sprite,X                            ;
    cpy #$12                                        ;
    bne not_candelabra                              ;
    lda enemies_unpacked_sprite_offset,X            ;
    eor #1                                          ; Make candelabra flicker without moving
    sta enemies_unpacked_sprite_offset,X            ;
not_candelabra
    lda enemy_sprites_frames,Y                      ;
    sta sprite_frames                               ;
    lda enemies_direction,X                         ;
    bne enemy_moving_vertically                     ;

    ; Enemy moving horizontally                     ; For horizontally moving enemies,
    lda enemies_x,X                                 ; use the horizontal position to calculate frame
    and #7                                          ;
    lsr                                             ;
    ldy enemies_speed,X                             ;
    bmi calculate_frame                             ;
    clc                                             ;
    adc #4                                          ;
    bpl calculate_frame                             ;
enemy_moving_vertically                             ; For vertically moving enemies,
    lda game_timer                                  ;
    ldy enemies_speed,X                             ;
    bmi skip_inversion4                             ;
    eor #$ff                                        ;
skip_inversion4
    clc                                             ;
    adc enemies_y,X                                 ; use the vertical position to calculate frame
    and #7                                          ;
    lsr                                             ;
calculate_frame
    dec sprite_frames                               ;
    and sprite_frames                               ;
    clc                                             ;
    adc enemies_unpacked_sprite_offset,X            ;
    lsr                                             ;
    ror sprite_frames                               ;
    lsr                                             ;
    ror sprite_frames                               ;
    clc                                             ;
    adc #>unpacked_sprites                          ;
    sta sprite_address_high2                        ;
    lda sprite_frames                               ;
    and #$c0                                        ;
    sta sprite_address_low2                         ;
    ldy enemies_colour,X                            ;
    lda colour_mask_values,Y                        ;
    sta sprite_colour                               ;
    txa                                             ;
    tay                                             ;
    ldx enemies_y,Y                                 ;
    rts                                             ;

!if (<unpacked_sprites != 0) {
    !error "unpacked sprites must be on a page boundary"
}

; ***************************************************************************************
move_enemy
    lda enemy_to_consider2                          ;
    ldy enemies_direction,X                         ;
    beq enemy_moving_horizontally1                  ;
    clc                                             ;
    adc #9                                          ; Use vertical variables for vertically moving enemies
enemy_moving_horizontally1
    tay                                             ;
    lda enemies_speed,X                             ;
    sta enemies_previous_speed,X                    ;
    clc                                             ;
    adc enemies_x,Y                                 ;
    cmp enemies_direction,X                         ;
    bcs at_edge_of_screen                           ;
    sta enemies_x,Y                                 ;
at_edge_of_screen
    cmp enemies_minimum,X                           ;
    bcc flip_direction                              ;
    beq flip_direction                              ;
    cmp enemies_maximum,X                           ;
    bcc update_position                             ;
flip_direction
    lda enemies_speed,X                             ;
    eor #$ff                                        ;
    sec                                             ;
    adc #0                                          ;
    sta enemies_speed,X                             ;
    lda enemies_x,Y                                 ;
update_position
    sta enemies_x,Y                                 ;
    rts                                             ;

; ***************************************************************************************
plot_enemies
    ldx enemies_on_screen                           ;
    beq leave11                                     ;
    stx enemy_to_consider2                          ;
plot_enemies_loop
    dec enemies_need_replot,X                       ;
    bne skip_enemy                                  ;
    jsr calculate_enemy_sprite_address              ;
    jsr plot_enemy                                  ;
    jsr wipe_space_vacated_by_enemy                 ;
skip_enemy
    dec enemy_to_consider2                          ;
    ldx enemy_to_consider2                          ;
    bne plot_enemies_loop                           ;
leave11
    rts                                             ;

; ***************************************************************************************
plot_or_unplot_player_sprite
    ldy sprite_address_low2                         ;
    sty sprite_address_for_restore_lda_low          ;
    sty sprite_address_for_copy_and_low             ;
    sty sprite_address_for_copy_ora_low             ;
    ldy sprite_address_high2                        ;
    sty sprite_address_for_restore_lda_high         ;
    sty sprite_address_for_copy_and_high            ;
    sty sprite_address_for_copy_ora_high            ;
plot_or_unplot_previous_player_sprite
    jsr calculate_screen_address                    ;
    ldx #$3f                                        ;
plot_player_sprite_outer_loop
    ldy #$18                                        ;
    sec                                             ;
plot_player_sprite_loop
plot_player_sprite_mode
    bcc restore_background                          ;
;     also     BCS restore_background
copy_background                                     ; If BCC, copy screen memory to buffer
    lda (screen_address),Y                          ;
sprite_address_for_copy_and_low = * + 1
sprite_address_for_copy_and_high = * + 2
    and $1111,X                                     ; actually AND sprite_address,X
    sta player_background_buffer,X                  ;
    lda (screen_address),Y                          ;
sprite_address_for_copy_ora_low = * + 1
sprite_address_for_copy_ora_high = * + 2
    ora $1111,X                                     ; actually ORA sprite_address,X
                                                    ; adding player sprite
    sta (screen_address),Y                          ;
    bcs continue_with_next_byte                     ;
restore_background                                  ; If BCS, copy buffer to screen memory
sprite_address_for_restore_lda_low = * + 1
sprite_address_for_restore_lda_high = * + 2
    lda $1111,X                                     ; actually LDA sprite_address,X
    eor #$ff                                        ;
    and (screen_address_low),Y                      ; using player sprite as mask
    ora player_background_buffer,X                  ;
    sta (screen_address),Y                          ;
continue_with_next_byte
    dex                                             ;
    tya                                             ;
    sbc #8                                          ;
    tay                                             ;
    bcs plot_player_sprite_loop                     ;
    txa                                             ;
    bmi leave12                                     ;
    inc screen_address_low                          ;
    lda screen_address_low                          ;
    bit seven                                       ;
    bne plot_player_sprite_outer_loop               ;
    sec                                             ;
    sbc #8                                          ;
    sta screen_address_low                          ;
    lda screen_address_high                         ;
    clc                                             ;
    adc #2                                          ;
    sta screen_address_high                         ;
    bpl plot_player_sprite_outer_loop               ;
leave12
    rts                                             ;

; ***************************************************************************************
check_for_keypress
    ldy #$ff                                        ;
    lda #$81                                        ; Scan for a particular key
    jsr OSBYTE                                      ;
    txa                                             ;
    rts                                             ;

; ***************************************************************************************
handle_player_keys
    lda player_conveyor_direction                   ;
    beq player_not_conveyed                         ;
    lda #0                                          ;
    sta player_conveyor_direction                   ; Mark player as not being conveyed
    beq check_for_jump                              ;
player_not_conveyed
    ldx #$9e                                        ; Z
    jsr check_for_keypress                          ;
    and #$fe                                        ;
    sta player_horizontal_speed                     ;
    ldx #$bd                                        ; X
    jsr check_for_keypress                          ;
    and #2                                          ;
    clc                                             ;
    adc player_horizontal_speed                     ;
    sta player_horizontal_speed                     ;
check_for_jump
    ldx #$b7                                        ; *
    jsr check_for_keypress                          ;
    sta player_started_jump                         ;
    rts                                             ;

; ***************************************************************************************
update_game
    lda player_rope_pixel                           ;
    bne consider_keys                               ; player can't jump when on the rope
    lda player_is_jumping                           ;
    ora player_jump_timer                           ;
    bne skip_keys                                   ; Player can't start jump or move when jumping
consider_keys
    jsr handle_player_keys                          ;
skip_keys
    jsr to_handle_rope_time_and_events              ;
    jsr handle_player_jumping                       ;
    lda player_horizontal_speed                     ;
    beq player_isnt_moving                          ;
    cmp player_speed                                ;
    beq player_already_moving                       ; Is the player already facing in direction of move?
    sta player_speed                                ; If not, make them face that direction, but don't move
    bne player_isnt_moving                          ;
player_already_moving
    clc                                             ;
    adc player_x_in_enemies                         ;
    sta player_x_in_enemies                         ;
player_isnt_moving
    jsr check_player_move_for_walls                 ;
    beq player_can_move                             ;
    lda player_x_in_enemies                         ;
    sec                                             ;
    sbc player_horizontal_speed                     ;
    sta player_x_in_enemies                         ;
player_can_move
    ldx #0                                          ; player
    jsr calculate_tile_address_for_enemy_X          ;
    jsr see_if_player_should_start_jump             ;
    jsr check_player_jump_for_walls                 ;
    lda player_jump_timer                           ;
    cmp #7                                          ;
    bcs player_falling_after_jump                   ;
    lda player_on_slope                             ;
    beq not_jumping_along_slope                     ;
    lda player_horizontal_speed                     ;
    beq not_jumping_along_slope                     ;
    ldx slope_direction                             ;
    cmp slope_speeds,X                              ;
    beq not_jumping_along_slope                     ;
    inc enemies_y                                   ; player_y_in_enemies ; Make player move down to follow slope
    inc player_y_in_enemies                         ;
not_jumping_along_slope
    ldx #0                                          ; player
    stx player_on_slope                             ;
    jsr calculate_tile_address_for_enemy_X          ;
    jsr consider_tiles_under_player                 ;
    ldx slope_direction                             ;
    lda player_x_in_enemies                         ;
    and #7                                          ;
    cmp slope_checks,X                              ;
    bne not_slope1                                  ;
    ldy slope_values,X                              ;
    lda (tile_address1),Y                           ;
    cmp #3                                          ; SLOPE
    bne not_slope1                                  ;
    lda player_horizontal_speed                     ;
    cmp slope_speeds,X                              ;
    bne not_slope1                                  ;
    lda player_y_in_enemies                         ;
    sec                                             ;
    sbc #2                                          ; If player moving up slope, move them upwards
    sta player_y_in_enemies                         ;
player_falling_after_jump
not_slope1
    jsr plot_room_items                             ;
    jsr plot_room_items                             ;
    jsr plot_room_items                             ;
    jsr update_conveyor                             ;
    jsr update_enemies                              ;
    ldx #0                                          ; player
    jsr calculate_tile_address_for_enemy_X          ;
    jsr to_mark_enemies_that_overlap_player         ;
    jsr plot_enemies                                ;
    lda #$b0                                        ; BCS ; Set to restore background
    sta plot_player_sprite_mode                     ;
    dec player_not_plotted                          ;
    beq skip_unplot                                 ;
    lda #0                                          ;
    sta irq_counter                                 ;
wait_for_irq                                        ; Slight delay to stop player flickering
    lda irq_counter                                 ;
    beq wait_for_irq                                ;
    lda player_x                                    ;
    ldx player_y                                    ;
    jsr plot_or_unplot_previous_player_sprite       ; Unplot player
skip_unplot
    jsr plot_enemies                                ;
    jsr to_update_arrows                            ;
    lda #$90                                        ; BCC ; Set to copy background
    sta plot_player_sprite_mode                     ;
    dec player_not_plotted                          ;
    bpl skip_plot                                   ;
    ldx #0                                          ; player
    jsr calculate_enemy_sprite_address              ;
    lda player_x_in_enemies                         ;
    and #$f8                                        ;
    sta player_x                                    ;
    stx player_y                                    ;
    ldx player_y                                    ;
    bmi skip_plot                                   ;
    jsr plot_or_unplot_player_sprite                ; Plot player
skip_plot
    ldx #0                                          ; player
    stx player_not_plotted                          ;
    jsr calculate_tile_address_for_enemy_X          ;
    jsr check_for_player_touching_tiles             ;
    jsr check_for_player_leaving_room               ;
    lda player_killed                               ;
    beq leave13                                     ;
    lda #$10                                        ; sound_2
    jsr to_play_sound_number_a                      ; Play sounds for player dying
    lda #$28                                        ; sound_5
    jsr to_play_sound_number_a                      ;
    dec player_lives                                ;
    lda entry_horizontal_speed                      ; Set player back to where they entered the room
    sta player_horizontal_speed                     ;
    lda entry_jump_timer                            ;
    sta player_jump_timer                           ;
    lda entry_x                                     ;
    sta player_x_in_enemies                         ;
    lda entry_y                                     ;
    sta player_y_in_enemies                         ;
    lda entry_is_jumping                            ;
    sta player_is_jumping                           ;
    jsr remove_collected_items_from_room_data       ;
leave13
    rts                                             ;

; ***************************************************************************************
jump_parabola_table
    !byte $00, $04, $04, $04, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc
    !byte $fc, $fc

; ***************************************************************************************
initialise_enemies
    ldx #3                                          ;
    jsr get_x_bits_of_room_data                     ; Get three bits of room data for number of enemies
    sta enemies_on_screen                           ;
    tay                                             ;
    beq no_enemies                                  ;
initialise_enemies_loop                             ; For each enemy,
    ldx #6                                          ; Get six bits of room data for sprite
    jsr get_x_bits_of_room_data                     ;
    sta enemies_sprite,Y                            ;
    ldx #5                                          ; Get five bits of room data for x position
    jsr get_x_bits_of_room_data_multiplied_by_eight ;
    sta enemies_x,Y                                 ;
    ldx #4                                          ; Get four bits of room data for y position
    jsr get_x_bits_of_room_data_multiplied_by_eight ;
    sta enemies_y,Y                                 ;
    ldx #5                                          ; Get five bits of room data for minimum position
    jsr get_x_bits_of_room_data_multiplied_by_eight ;
    sta enemies_minimum,Y                           ;
    ldx #5                                          ; Get five bits of room data for maximum position
    jsr get_x_bits_of_room_data_multiplied_by_eight ;
    sta enemies_maximum,Y                           ;
    ldx #1                                          ; Get one bit of room data for direction
    jsr get_x_bits_of_room_data                     ; (0 = horizontal, 1 = vertical)
    asl                                             ;
    beq not_zero                                    ;
    lda #$ff                                        ;
not_zero
    sta enemies_direction,Y                         ;
    ldx #1                                          ; Get one bit of room data for direction
    jsr get_x_bits_of_room_data                     ; (0 = left/up, 1=right/down)
    sta invert                                      ;
    ldx #3                                          ; Get three bits of room data for speed
    jsr get_x_bits_of_room_data                     ;
    sta enemies_speed,Y                             ;
    ldx invert                                      ;
    bne skip_inversion5                             ;
    eor #$ff                                        ;
    clc                                             ;
    adc #1                                          ;
    sta enemies_speed,Y                             ;
skip_inversion5
    ldx #2                                          ; Get two bits of room data for colour
    jsr get_x_bits_of_room_data                     ;
    sta enemies_colour,Y                            ;
    lda #0                                          ;
    sta enemies_previous_speed,Y                    ;
    sta enemies_previous_tile_address_low,Y         ;
    dey                                             ;
    bne initialise_enemies_loop                     ;
no_enemies
    jmp unpack_enemy_sprites                        ;

; ***************************************************************************************
get_x_bits_of_room_data_multiplied_by_eight
    jsr get_x_bits_of_room_data                     ;
    asl                                             ;
    asl                                             ;
    asl                                             ;
    rts                                             ;

; ***************************************************************************************
set_tile_table_for_background
    ldy #(tile_table / $0200)                       ;
    sty tile_address_high1                          ;
    lda #$0f                                        ;
    sec                                             ;
    sbc tile_y                                      ;
    asl                                             ;
    asl                                             ;
    asl                                             ;
    asl                                             ;
    asl                                             ;
    rol tile_address_high1                          ;
    adc tile_x                                      ;
    sta tile_address_low1                           ;
    lda tile_type                                   ;
    adc #1                                          ;
    cmp #5                                          ; DEADLY
    bcc set_tile_table                              ;
    beq not_item                                    ;
    inc item_number                                 ; If this tile is an item, store its details
    ldx item_number                                 ;
    lda screen_address_low                          ;
    sta items_screen_address_low,X                  ;
    lda screen_address_high                         ;
    sta items_screen_address_high,X                 ;
    lda tile_address_low1                           ;
    sta items_tile_address_low,X                    ;
    lda tile_address_high1                          ;
    sta items_tile_address_high,X                   ;
    txa                                             ;
    ora #$10                                        ; Mark as item
not_item
    ora #$c0                                        ; Mark as not enemy, nor background
set_tile_table
    ldy #0                                          ;
    sta (tile_address1),Y                           ;
    rts                                             ;

!if (($0200 *(tile_table / $0200)) != tile_table) {
    !error "tile_table must be on an even page boundary"
}

; ***************************************************************************************
wipe_tile_table
    ldy #0                                          ;
    lda #$80                                        ;
wipe_tile_table_loop
    sta tile_table,Y                                ;
    sta tile_table + $100,Y                         ;
    iny                                             ;
    bne wipe_tile_table_loop                        ;
    rts                                             ;

; ***************************************************************************************
calculate_tile_address_for_enemy_X
    lda #(tile_table / $0200)                       ;
    sta tile_address_high1                          ;
    lda enemies_y,X                                 ;
    sec                                             ;
    sbc #8                                          ;
    bcs +                                           ;
    dec tile_address_high1                          ;
+
    asl                                             ;
    asl                                             ;
    rol tile_address_high1                          ;
    and #$e0                                        ;
    sta tmp                                         ;
    lda enemies_x,X                                 ;
    lsr                                             ;
    lsr                                             ;
    lsr                                             ;
    clc                                             ;
    adc tmp                                         ;
    sta tile_address_low1                           ;
    rts                                             ;

; ***************************************************************************************
consider_tiles_under_player                         ; There are two tiles beneath the player's feet ; one
    ldx slope_direction                             ; which may have a slope, and one which does not
    ldy slope_tile_offsets,X                        ;
    lda (tile_address1),Y                           ; Consider tile beneath player's feet (with slope)
    beq is_space                                    ;
    bpl isnt_space                                  ;
is_space
    inx                                             ;
    ldy slope_tile_offsets,X                        ;
    lda (tile_address1),Y                           ; Consider tile beneath player's feet (without slope)
    beq player_in_midair                            ; If both are empty, the player falls
    bmi player_in_midair                            ;
isnt_space
    cmp #3                                          ; SLOPE
    bne not_slope2                                  ;
    jsr consider_slope_effect                       ; If one is a slope, see how that affects the player
    beq player_in_midair                            ;
    bpl check_for_conveyor                          ;
not_slope2
    sta tile2                                       ;
    lda player_y_in_enemies                         ;
    and #7                                          ;
    cmp #3                                          ;
    bcs player_in_midair                            ;
    lda tile2                                       ;
check_for_conveyor
    cmp #4                                          ; CONVEYOR
    bne not_conveyor                                ;
    jsr consider_conveyor_effect                    ;
not_conveyor
    lda player_is_jumping                           ;
    beq align_player_with_tile                      ;
    lda player_entered_room_falling_too_far         ;
    bne player_fell_too_far                         ;
    lda player_y_in_enemies                         ;
    sec                                             ;
    sbc where_player_fell_from                      ;
    bmi player_didnt_fall_too_far                   ;
    cmp #$21                                        ; Has the player fallen more than four tiles?
    bcc player_didnt_fall_too_far                   ;
player_fell_too_far
    inc player_killed                               ; Kill the player if they hit after falling too far
player_didnt_fall_too_far
    lda #0                                          ;
    sta player_jump_timer                           ;
    sta player_is_jumping                           ;
align_player_with_tile
    lda player_on_slope                             ;
    bne leave14                                     ;
    lda player_y_in_enemies                         ;
    and #$f8                                        ;
    sta player_y_in_enemies                         ;
leave14
    rts                                             ;
player_in_midair
    lda player_jump_timer                           ;
    bne leave15                                     ;
    lda player_is_jumping                           ;
    bne skip_noting_fall                            ;
    lda player_y_in_enemies                         ;
    sta where_player_fell_from                      ;
    sta player_is_jumping                           ;
skip_noting_fall
    lda #0                                          ;
    sta player_horizontal_speed                     ;
    lda player_y_in_enemies                         ;
    clc                                             ;
    adc #4                                          ;
    sta player_y_in_enemies                         ;
leave15
    rts                                             ;

; ***************************************************************************************
update_enemies
    lda enemies_on_screen                           ;
    beq leave16                                     ;
    sta enemy_to_consider2                          ;
update_enemies_loop
    ldx enemy_to_consider2                          ;
    jsr move_enemy                                  ;
    lda #1                                          ;
    sta enemies_need_replot,X                       ;
    lda #0                                          ;
    sta enemy_has_moved,X                           ;
    jsr calculate_tile_address_for_enemy_X          ;
    ldy enemies_previous_tile_address_low,X         ;
    sty previous_tile_address_low                   ;
    cmp enemies_previous_tile_address_low,X         ;
    beq consider_next_enemy2                        ;
    inc enemy_has_moved,X                           ;
    sta enemies_previous_tile_address_low,X         ;
    txa                                             ;
    ora #$80                                        ;
    ldy #$20                                        ; Mark enemy in four tiles
    sta (tile_address1),Y                           ;
    iny                                             ;
    sta (tile_address1),Y                           ;
    ldy #$40                                        ;
    sta (tile_address1),Y                           ;
    iny                                             ;
    sta (tile_address1),Y                           ;
    lda previous_tile_address_low                   ;
    beq consider_next_enemy2                        ;
    lda enemies_previous_speed,X                    ;
    beq consider_next_enemy2                        ; If the enemy is moving,
    asl                                             ;
    lda enemies_direction,X                         ;
    and #2                                          ;
    adc #0                                          ;
    tax                                             ;
    ldy direction_tile_offsets_one,X                ;
    lda space_tile                                  ;
    sta (tile_address1),Y                           ; Remove enemy from previously occupied tiles
    ldy direction_tile_offsets_two,X                ;
    sta (tile_address1),Y                           ;
    ldx enemy_to_consider2                          ;
consider_next_enemy2
    dec enemy_to_consider2                          ;
    bne update_enemies_loop                         ;
leave16
    rts                                             ;

; ***************************************************************************************
wipe_space_vacated_by_enemy
    ldx enemy_to_consider2                          ;
    lda enemy_has_moved,X                           ;
    beq leave17                                     ;
    lda enemies_direction,X                         ;
    bne leave17                                     ; Leave if this enemy is moving vertically.
    lda #8                                          ;
    sta sprite_width                                ; Set sprite size to be 16x2 pixels
    lda #$1f                                        ;
    sta sprite_size_in_bytes                        ;
    lda #$f8                                        ;
    ldy enemies_previous_speed,X                    ;
    bpl enemy_moving_right                          ;
enemy_moving_left
    lda #$0c                                        ;
enemy_moving_right
    clc                                             ;
    adc enemies_x,X                                 ;
    sta enemy_x                                     ;
    lda #<space_sprite                              ;
    sta sprite_address_low2                         ;
    lda #>space_sprite                              ;
    sta sprite_address_high2                        ;
    lda enemies_y,X                                 ;
    tax                                             ;
    lda enemy_x                                     ;
    jsr plot_sprite                                 ;
    lda #$18                                        ; Restore sprite size to 16x16 pixels
    sta sprite_width                                ;
    lda #$3f                                        ;
    sta sprite_size_in_bytes                        ;
    ldx enemy_to_consider2                          ;
leave17
    rts                                             ;

; ***************************************************************************************
direction_tile_offsets_one
    !byte $1f, $22, $00, $60

direction_tile_offsets_two
    !byte $3f, $42, $01, $61

; ***************************************************************************************
plot_enemy
    lda enemies_direction,Y                         ;
    beq enemy_moving_horizontally2                  ;
    lda enemies_previous_speed,Y                    ;
    bmi enemy_moving_up                             ;
enemy_moving_down                                   ; If this enemy is moving down,
    ldx enemies_sprite,Y                            ;
    cpx #$21                                        ;
    beq enemy_is_skull_mouth                        ; The skull mouth will be overwritten by the skull top
    sta previous_speed                              ; Otherwise,
    asl                                             ;
    asl                                             ;
    sbc #0                                          ;
    sta sprite_size_in_bytes                        ; Set sprite to be section previously occupied
    lda sprite_address_low2                         ;
    sta previous_sprite_address_low                 ;
    lda #0                                          ;
    sta sprite_address_low2                         ;
    lda sprite_address_high2                        ;
    sta previous_sprite_address_high                ;
    lda #$70                                        ;
    sta sprite_address_high2                        ;
    lda enemies_y,Y                                 ;
    sec                                             ;
    sbc previous_speed                              ;
    tax                                             ;
    lda enemies_x,Y                                 ;
    jsr plot_sprite                                 ; Wipe previous position of sprite
    lda previous_sprite_address_high                ;
    sta sprite_address_high2                        ;
    lda #$3f                                        ; Set sprite to be 16x16 pixels
    sta sprite_size_in_bytes                        ;
    lda previous_sprite_address_low                 ;
    sta plot_sprite_address_low                     ; Plot sprite
    jsr into_plot_sprite_with_skip                  ;
    rts                                             ;
enemy_is_skull_mouth
    ldx enemies_y,Y                                 ;
enemy_moving_horizontally2
    lda enemies_x,Y                                 ;
    and #$f8                                        ;
    jsr plot_sprite                                 ;
    rts                                             ;
enemy_moving_up                                     ; If the enemy is moving up,
    lda enemies_x,Y                                 ;
    jsr plot_sprite                                 ; Plot sprite
    lda #0                                          ;
    sta plot_sprite_address_low                     ;
    ldy enemy_to_consider2                          ;
    lda #$70                                        ;
    sta sprite_address_high2                        ;
    lda enemies_previous_speed,Y                    ;
    eor #$ff                                        ;
    clc                                             ;
    adc #1                                          ;
    asl                                             ;
    asl                                             ;
    sbc #0                                          ;
    sta sprite_size_in_bytes                        ; Set sprite to be section previously occupied
    jsr into_plot_sprite_with_skip                  ; Wipe previous position of sprite
    lda #$3f                                        ;
    sta sprite_size_in_bytes                        ; Restore sprite to 16x16 pixels
    rts                                             ;

; ***************************************************************************************
into_plot_sprite_with_skip
    ldx sprite_size_in_bytes                        ;
    lda sprite_address_high2                        ;
    sta plot_sprite_address_high                    ;
    jmp plot_sprite_skipping_first_column           ;

check_player_move_for_walls
    ldx #0                                          ; player
    stx walls                                       ;
    jsr calculate_tile_address_for_enemy_X          ;
    ldy #$20                                        ;
    lda player_horizontal_speed                     ;
    beq leave_with_result                           ; No walls hit if player not moving
    bmi player_moving_left                          ;
player_moving_right
    iny                                             ;
player_moving_left
    jsr check_tile_for_wall                         ; Check top of player
    jsr check_tile_for_wall                         ; Check middle/bottom of player
    lda player_y_in_enemies                         ;
    and #7                                          ;
    beq leave_with_result                           ;
    jsr check_tile_for_wall                         ; Check bottom of player if not aligned
leave_with_result
    lda walls                                       ;
    rts                                             ;

; ***************************************************************************************
check_tile_for_wall
    lda (tile_address1),Y                           ;
    cmp #2                                          ; WALL
    bne not_wall                                    ;
    inc walls                                       ;
not_wall
    tya                                             ;
    clc                                             ;
    adc #$20                                        ;
    tay                                             ;
    rts                                             ;

; ***************************************************************************************
see_if_player_should_start_jump
    lda player_started_jump                         ;
    beq leave18                                     ;
    inc player_is_jumping                           ;
    lda #$12                                        ;
    sta player_jump_timer                           ;
    inc player_started_jump                         ;
    lda player_y_in_enemies                         ;
    sec                                             ;
    sbc #8                                          ;
    sta where_player_fell_from                      ;
    jsr check_player_jump_for_walls                 ;
    beq leave18                                     ;
    lda #8                                          ; sound_1
    jsr to_play_sound_number_a                      ; Play sound for jumping
    jsr handle_player_jumping                       ;
leave18
    rts                                             ;

; ***************************************************************************************
check_player_jump_for_walls
    lda player_y_in_enemies                         ;
    and #7                                          ;
    bne leave19                                     ;
    ldy #0                                          ; Consider tile above player's left
    lda (tile_address1),Y                           ;
    eor #2                                          ; WALL
    beq cant_jump                                   ;
    iny                                             ; Consider tile above player's right
    lda (tile_address1),Y                           ;
    eor #2                                          ; WALL
    bne leave19                                     ;
cant_jump
    jsr handle_player_jumping                       ; Conclude any existing jump
    lda #0                                          ; If either is a wall, player can't jump
    sta player_jump_timer                           ;
leave19
    rts                                             ;

; ***************************************************************************************
check_for_player_touching_tiles
    lda player_y_in_enemies                         ;
    ora #7                                          ;
    sec                                             ;
    sbc player_y_in_enemies                         ;
    sta rows_to_check                               ;
    ldy #$20                                        ; Consider tile at top left of player
    lda #$3d                                        ;
    jsr check_for_player_touching_tile              ;
    ldy #$21                                        ; Consider tile at top right of player
    lda #$3f                                        ;
    jsr check_for_player_touching_tile              ;
    rts                                             ;

; ***************************************************************************************
check_for_player_touching_tile
    sta buffer_offset                               ;
    ldx rows_to_check                               ;
    jsr check_rows_of_player_against_tile1          ; Check top of player (aligned to tile boundaries)
    ldx #7                                          ;
    jsr check_rows_of_player_against_tile1          ; Check middle of player
    lda #7                                          ;
    sec                                             ;
    sbc rows_to_check                               ;
    beq leave20                                     ;
    tax                                             ;
    dex                                             ;
    jsr check_rows_of_player_against_tile1          ; Check bottom of player
leave20
    rts                                             ;

; ***************************************************************************************
check_rows_of_player_against_tile1
    tya                                             ;
    clc                                             ;
    adc #$20                                        ;
    sta item_state                                  ; next_tile_offset ; Consider tile immediately below when next called
    lda (tile_address1),Y                           ;
    sta tile1                                       ;
    bpl tile_is_background                          ;
    ldy buffer_offset                               ; If this tile is an enemy or an item,
check_rows_of_player_against_tile2                  ; for each row of the player within the tile,
    lda player_background_buffer,Y                  ;
    beq not_part_of_player_left                     ; is there part of the player there?
    jsr player_is_touching_tile                     ; If so, consider the interaction
not_part_of_player_left
    dey                                             ;
    lda player_background_buffer,Y                  ; Check again on right-hand side
    beq not_part_of_player_right                    ;
    jsr player_is_touching_tile                     ;
not_part_of_player_right
    dey                                             ;
    dey                                             ;
    dey                                             ;
    dex                                             ;
    bpl check_rows_of_player_against_tile2          ;
    sty buffer_y                                    ;
    ldy next_tile_offset                            ;
    rts                                             ;
tile_is_background                                  ; If this tile is just background,
    inx                                             ; set things up for the next check
    txa                                             ;
    asl                                             ;
    asl                                             ;
    eor #$ff                                        ;
    sec                                             ;
    adc buffer_offset                               ;
    sta buffer_offset                               ;
    ldy next_y                                      ;
    rts                                             ;

; ***************************************************************************************
player_is_touching_tile
    stx x1                                          ;
    sty y                                           ;
    lda #0                                          ;
    sta player_background_buffer,Y                  ;
    lda tile1                                       ;
    and #$7f                                        ;
    beq tile_is_space                               ;
    cmp #$4e                                        ;
    bcs tile_is_item                                ;
    cmp #2                                          ;
    bne not_bathroom_toilet                         ; Is this the bathroom toilet? (room $15, slot 2)
    lda player_room                                 ;
    cmp #$15                                        ; The Bathroom
    beq leave_with_initial_x_and_y                  ; If so, it isn't deadly.
not_bathroom_toilet
    inc player_killed                               ; Otherwise, kill the player
leave_with_initial_x_and_y
    ldx x1                                          ;
    ldy y                                           ;
    rts                                             ;
tile_is_item                                        ; If the tile is an item,
    and #$0f                                        ;
    tax                                             ;
    lda items_colour,X                              ;
    beq leave_with_initial_x_and_y                  ; has it been collected?
    lda #0                                          ;
    sta items_colour,X                              ; If not, remove it from the screen
    stx item_number                                 ;
    jsr to_collect_item                             ;
    bpl leave_with_initial_x_and_y                  ;
tile_is_space
    lda room_contains_rope                          ;
    bne leave_with_initial_x_and_y                  ;
    inc player_killed                               ; Player has been hit by an arrow or moving enemy
    bne leave_with_initial_x_and_y                  ;

plot_room_items
    ldx items_in_room_minus_one                     ;
    bmi leave21                                     ;
    cpx item_number                                 ;
    bcc skip_item                                   ;
    ldx item_number                                 ;
    lda items_screen_address_low,X                  ;
    sta screen_address_low                          ;
    lda items_screen_address_high,X                 ;
    sta screen_address_high                         ;
    ldy items_colour,X                              ;
    beq item_collected1                             ;
    dec items_colour,X                              ;
    bne skip_reset_colour                           ;
    lda #3                                          ;
    sta items_colour,X                              ;
skip_reset_colour
    ldy items_colour,X                              ;
item_collected1
    lda colour_mask_values,Y                        ;
    sta sprite_colour                               ;
    ldy #$0f                                        ;
plot_item_loop
    lda unpacked_background_sprites,Y               ;
    and sprite_colour                               ;
    sta (screen_address),Y                          ;
    dey                                             ;
    bpl plot_item_loop                              ;
    lda items_tile_address_low,X                    ;
    sta tile_address_low2                           ;
    lda items_tile_address_high,X                   ;
    sta tile_address_high2                          ;
    txa                                             ;
    ora #$e0                                        ;
    ldy #0                                          ;
    sta (tile_address2),Y                           ;
skip_item
    dec item_number                                 ;
    bpl leave21                                     ;
    lda #$0b                                        ;
    sta item_number                                 ;
leave21
    rts                                             ;

; ***************************************************************************************
consider_slope_effect
    ldx slope_direction                             ;
    tya                                             ; Y is a tile offset of tile beneath player with slope
    cmp slope_tile_offsets,X                        ;
    bne leave_with_minus_one                        ;
player_is_climbing_slope
    inc player_on_slope                             ;
    lda player_y_in_enemies                         ;
    and #7                                          ;
    sta player_y_fraction                           ;
    lda player_x_in_enemies                         ;
    and #7                                          ;
    eor slope_climb_eors,X                          ;
    sec                                             ;
    adc slope_climb_adds,X                          ;
    bmi player_not_climbing_slope                   ;
    cmp player_y_fraction                           ;
    bcc player_not_climbing_slope                   ;
    dec enemies_y                                   ; Make player move up to follow slope
    dec player_y_in_enemies                         ;
    bcs leave_with_zero                             ;
player_not_climbing_slope
    clc                                             ;
    adc #4                                          ;
    cmp player_y_fraction                           ;
    bcc leave_with_zero                             ;
    sbc #2                                          ;
    sta player_y_fraction                           ;
    lda player_y_in_enemies                         ;
    and #$f8                                        ;
    ora player_y_fraction                           ;
    sbc #1                                          ;
    sta player_y_in_enemies                         ;
    lda #1                                          ;
    ldx player_room                                 ;
    cpx #$16                                        ; The slopes in "Halfway up the East Wall"
    beq leave_with_four                             ;
    cpx #$1d                                        ; and "The Chapel" are treated as conveyors
    bne leave_with_one                              ;
leave_with_four
    lda #4                                          ; CONVEYOR
leave_with_one
    tax                                             ; 1 = PLATFORM
    rts                                             ;
leave_with_zero
    lda #0                                          ; SPACE
    rts                                             ;
leave_with_minus_one
    lda #$ff                                        ; Treat tile as though not a slope
    rts                                             ;

; ***************************************************************************************
slope_climb_eors
    !byte $ff, $00

slope_climb_adds
    !byte $05, $fe

slope_checks
    !byte $00, $06

slope_values
    !byte $41, $40

slope_speeds
    !byte $02, $fe

slope_tile_offsets
    !byte $61, $60, $61

; ***************************************************************************************
consider_conveyor_effect
    lda player_horizontal_speed                     ; Is the player moving?
    beq start_conveying_player                      ;
    cmp conveyor_direction                          ; If not, or they're moving in the conveyor's direction,
    bne leave22                                     ;
start_conveying_player
    lda conveyor_direction                          ; move them with the conveyor
    sta player_horizontal_speed                     ;
    sta player_conveyor_direction                   ; (preventing them from changing direction)
leave22
    rts                                             ;

check_for_player_leaving_room
    ldy #0                                          ;
    lda player_x_in_enemies                         ;
    beq player_at_left_or_right_edge_of_room        ;
    iny                                             ;
    cmp #$f6                                        ;
    beq player_at_left_or_right_edge_of_room        ;
    iny                                             ;
    ldx #$68                                        ;
    lda player_y_in_enemies                         ;
    bmi player_at_top_or_bottom_edge_of_room        ;
    iny                                             ;
    ldx #1                                          ;
    cmp #$71                                        ;
    bcc leave23                                     ;
    lda player_is_jumping                           ;
    beq player_at_top_or_bottom_edge_of_room        ;
    lda player_y_in_enemies                         ;
    sec                                             ;
    sbc where_player_fell_from                      ;
    cmp #$22                                        ;
    bcc player_at_top_or_bottom_edge_of_room        ;
    sta player_entered_room_falling_too_far         ;
    jmp player_at_top_or_bottom_edge_of_room        ;
player_at_left_or_right_edge_of_room
    eor #$f4                                        ;
    sta player_x_in_enemies                         ;
    jmp change_room                                 ;
player_at_top_or_bottom_edge_of_room
    stx player_y_in_enemies                         ;
    lda #0                                          ;
    sta player_horizontal_speed                     ;
change_room
    lda exit_rooms,Y                                ;
    sta player_room                                 ;
    jsr remove_collected_items_from_room_data       ;
    jsr initialise_room                             ;
leave23
    rts                                             ;

; ***************************************************************************************
initialise_room_items_and_exits
    ldx #4                                          ; Get four bits of room data for number of items in room
    jsr get_x_bits_of_room_data                     ;
    tay                                             ;
    dey                                             ;
    sty items_in_room_minus_one                     ;
    bmi no_items                                    ;
set_items_loop                                      ; For each item,
    ldx #1                                          ; get one bit of room data for its state
    jsr get_x_bits_of_room_data                     ; (0 = collected, 1 = uncollected)
    sta items_colour,Y                              ;
    dey                                             ;
    bpl set_items_loop                              ;
no_items
    ldy #0                                          ;
set_exits_loop                                      ; For each of four directions
    ldx #6                                          ; get six bits of room data for the room exited to
    jsr get_x_bits_of_room_data                     ;
    sta exit_rooms,Y                                ;
    iny                                             ;
    cpy #4                                          ;
    bne set_exits_loop                              ;
    ldx #1                                          ; Get one bit of room data for conveyor direction
    jsr get_x_bits_of_room_data                     ; (0 = left, 1 = right)
    asl                                             ;
    asl                                             ;
    sec                                             ;
    sbc #2                                          ;
    sta conveyor_direction                          ;
    ldx #1                                          ; Get one bit of room data for slope direction
    jsr get_x_bits_of_room_data                     ; (0 = /, 1 = \)
    sta slope_direction                             ;
    ldx #1                                          ; Get one bit of room data for rope
    jsr get_x_bits_of_room_data                     ; (1 = room contains rope)
    sta room_contains_rope                          ;
    rts                                             ;

; ***************************************************************************************
remove_collected_items_from_room_data
    ldy #0                                          ;
    ldx items_in_room_minus_one                     ;
    bmi leave24                                     ;
    lda #4                                          ;
    sta bit_for_item                                ;
remove_collected_items_from_room_data_loop
    dec bit_for_item                                ;
    bpl skip_new_byte                               ;
    lda #7                                          ;
    sta bit_for_item                                ;
    iny                                             ;
skip_new_byte
    lda items_colour,X                              ;
    beq item_collected2                             ;
    lda #$ff                                        ;
item_collected2
    sta item_state                                  ;
    stx x2                                          ;
    ldx bit_for_item                                ;
    lda inverse_of_bits,X                           ;
    eor #$ff                                        ;
    and item_state                                  ;
    sta item_state                                  ;
    lda (room_data_address),Y                       ;
    and inverse_of_bits,X                           ;
    ora item_state                                  ;
    sta (room_data_address),Y                       ;
    ldx x2                                          ;
    dex                                             ;
    bpl remove_collected_items_from_room_data_loop  ;
leave24
    rts                                             ;

; ***************************************************************************************
inverse_of_bits
    !byte $7f, $bf, $df, $ef, $f7, $fb, $fd, $fe

; ***************************************************************************************
reset_items
    ldy #$0b                                        ;
    lda #1                                          ;
mark_all_items_as_uncollected_loop
    sta items_colour,Y                              ;
    dey                                             ;
    bpl mark_all_items_as_uncollected_loop          ;
    lda #$3c                                        ;
    sta room                                        ;
reset_items_room_loop
    ldx room                                        ;
    jsr calculate_room_data_address                 ;
    ldx #4                                          ;
    jsr get_x_bits_of_room_data                     ;
    sta items_in_room_minus_one                     ;
    dec items_in_room_minus_one                     ;
    jsr remove_collected_items_from_room_data       ;
    dec room                                        ;
    bne reset_items_room_loop                       ;
    rts                                             ;

; ***************************************************************************************
calculate_room_data_address
    lda #0                                          ;
    sta room_data_offset                            ;
    sta bits_remaining_in_room_data_byte            ;
    lda room_data_address_low_table,X               ;
    sta room_data_address_low                       ;
    lda room_data_address_high_table,X              ;
    clc                                             ;
    adc #>room_data_address_low_table               ;
    sta room_data_address_high                      ;
    rts                                             ;

; ***************************************************************************************
update_conveyor
    lda pages_of_tile_table_remaining_when_finding_conveyor ;
    beq leave25                                     ; Is there a conveyor in this room? If not, leave
    lda game_timer                                  ;
    and #7                                          ;
    tax                                             ;
    lda conveyor_length                             ;
    sta conveyor_sections_remaining_to_update       ;
    lda conveyor_screen_address_low                 ;
    sta screen_address_low                          ;
    lda conveyor_screen_address_high                ;
    sta screen_address_high                         ;
    ldy #0                                          ;
    clc                                             ;
update_conveyor_loop
    lda unpacked_conveyor_sprite,X                  ;
    sta (screen_address),Y                          ;
    iny                                             ;
    iny                                             ;
    lda unpacked_conveyor_sprite + 8,X              ;
    sta (screen_address),Y                          ;
    tya                                             ;
    adc #6                                          ;
    tay                                             ;
    lda unpacked_conveyor_sprite + 16,X             ;
    sta (screen_address),Y                          ;
    iny                                             ;
    iny                                             ;
    lda unpacked_conveyor_sprite + 24,X             ;
    sta (screen_address),Y                          ;
    tya                                             ;
    adc #6                                          ;
    tay                                             ;
    bne +                                           ;
    inc screen_address_high                         ;
    clc                                             ;
+
    dec conveyor_sections_remaining_to_update       ;
    bne update_conveyor_loop                        ;
leave25
    rts                                             ;

; ***************************************************************************************
calculate_screen_address_of_conveyor
    ldy #<tile_table                                ;
    sty tile_address_low1                           ;
    lda #>tile_table                                ;
    sta tile_address_high1                          ;
    lda #2                                          ;
    sta pages_of_tile_table_remaining_when_finding_conveyor ;
find_start_of_conveyor_loop
    jsr check_if_tile_is_conveyor                   ;
    bne find_start_of_conveyor_loop                 ;
    sty conveyor_screen_address_low                 ;
    lda tile_address_high1                          ;
    and #1                                          ;
    asl conveyor_screen_address_low                 ;
    rol                                             ;
    asl conveyor_screen_address_low                 ;
    rol                                             ;
    asl conveyor_screen_address_low                 ;
    rol                                             ;
    asl conveyor_screen_address_low                 ;
    rol                                             ;
    adc #$30                                        ;
    sta conveyor_screen_address_high                ;
    ldx #0                                          ;
    inc pages_of_tile_table_remaining_when_finding_conveyor ;
find_end_of_conveyor_loop
    inx                                             ;
    jsr check_if_tile_is_conveyor                   ;
    beq find_end_of_conveyor_loop                   ;
    stx conveyor_length                             ;
    jmp prepare_conveyor_sprites                    ;

check_if_tile_is_conveyor
    iny                                             ;
    bne compare_tile_with_four                      ;
    inc tile_address_high1                          ;
    dec pages_of_tile_table_remaining_when_finding_conveyor ;
    bne compare_tile_with_four                      ;
    pla                                             ; Leave calculate_screen_address_of_conveyor at end of
    pla                                             ; tile table
    rts                                             ;
compare_tile_with_four
    lda (tile_address1),Y                           ;
    cmp #4                                          ; CONVEYOR
    rts                                             ;

; ***************************************************************************************
prepare_conveyor_sprites
    lda background_tiles_sprites + 3                ;
    jsr calculate_background_sprite_address         ;
    ldx background_tiles_colours + 3                ;
    lda colour_mask_values,X                        ;
    sta conveyor_colour                             ;
    ldy #0                                          ;
    lda conveyor_direction                          ;
    bmi prepare_top_of_left_conveyor                ;
prepare_top_of_right_conveyor
    ldx #0                                          ; Prepare top of conveyor
    jsr prepare_right_conveyor_bytes                ;
    bmi prepare_conveyor_bottom                     ;
prepare_top_of_left_conveyor
    ldx #7                                          ;
    jsr prepare_left_conveyor_bytes                 ;
prepare_conveyor_bottom
    ldy #2                                          ;
    lda conveyor_direction                          ;
    bmi prepare_bottom_of_left_conveyor             ;
prepare_bottom_of_right_conveyor
    ldx #$0f                                        ; Prepare bottom of conveyor
    jsr prepare_left_conveyor_bytes                 ;
    bmi leave26                                     ;
prepare_bottom_of_left_conveyor
    ldx #8                                          ;
    jsr prepare_right_conveyor_bytes                ;
leave26
    rts                                             ;

; ***************************************************************************************
prepare_right_conveyor_bytes
    lda (sprite_address),Y                          ;
    sta packed_byte2                                ;
    lda #7                                          ;
    sta count                                       ;
prepare_right_conveyor_bytes_loop
    jsr rotate_and_store_conveyor_byte              ;
    inx                                             ;
    dec count                                       ;
    bpl prepare_right_conveyor_bytes_loop           ;
    rts                                             ;

prepare_left_conveyor_bytes
    lda (sprite_address),Y                          ;
    sta packed_byte2                                ;
    lda #7                                          ;
    sta count                                       ;
prepare_left_conveyor_bytes_loop
    jsr rotate_and_store_conveyor_byte              ;
    dex                                             ;
    dec count                                       ;
    bpl prepare_left_conveyor_bytes_loop            ;
    rts                                             ;

; ***************************************************************************************
rotate_and_store_conveyor_byte
    clc                                             ;
    lda packed_byte2                                ;
    bpl +                                           ;
    sec                                             ;
+
    rol                                             ;
    sta packed_byte2                                ;
    jsr unpack_byte_of_sprite_data                  ;
    and conveyor_colour                             ;
    sta unpacked_conveyor_sprite,X                  ;
    lda unpacked_byte_two                           ;
    and conveyor_colour                             ;
    sta unpacked_conveyor_sprite + 16,X             ;
    rts                                             ;

; ***************************************************************************************
animate_game_over_boot
    lda #$28                                        ;
    sta sound_0_pitch                               ;
    lda #0                                          ;
    sta melody_active                               ; Disable melody
    ldx #0                                          ; Room 0 is the Game Over screen
    jsr calculate_room_data_address                 ;
    jsr initialise_enemies                          ;
    lda #1                                          ;
    sta enemies_unpacked_sprite_offset + 2          ; Set second barrel to use player sprite
    sta enemies_need_replot + 1                     ; Mark all enemies as needing plotting
    sta enemies_need_replot + 2                     ;
    sta enemies_need_replot + 3                     ;
    jsr plot_enemies                                ;
    lda #>(unpacked_enemy_sprites + $40)            ;
    sta sprite_address_high2                        ;
    lda #<(unpacked_enemy_sprites + $40)            ;
    sta sprite_address_low2                         ;
animate_game_over_boot_loop
    lda enemies_x + 1                               ;
    ldx enemies_y + 1                               ;
    jsr plot_sprite                                 ; Plot boot
    inc sound_0_pitch                               ;
    inc sound_0_pitch                               ;
    lda #0                                          ; sound_0
    jsr to_play_sound_number_a                      ; Play game over sound
    ldx #$0f                                        ;
    jsr delay                                       ;
    inc enemies_y + 1                               ;
    lda enemies_y + 1                               ;
    cmp #$61                                        ;
    bne animate_game_over_boot_loop                 ;
    rts                                             ;

; ***************************************************************************************
delay
    ldy #0                                          ;
delay_loop
    dey                                             ;
    bne delay_loop                                  ;
    dex                                             ;
    bne delay_loop                                  ;
    rts                                             ;

; ***************************************************************************************
handle_player_jumping
    lda player_jump_timer                           ;
    beq leave27                                     ;
    tax                                             ;
    lda player_y_in_enemies                         ;
    clc                                             ;
    adc jump_parabola_table,X                       ;
    sta player_y_in_enemies                         ;
    dec player_jump_timer                           ;
    bne leave27                                     ;
    and #$fc                                        ;
    sta player_y_in_enemies                         ;
leave27
    rts                                             ;

; ***************************************************************************************
; [unused]  ; BASIC fragment
    !byte $36, $20, $88, $32, $0d, $01, $fe, $0c, $20, $50, $25, $3d, $26, $42, $30, $30 ; ... 6 STEP 2
    !byte $0d, $02, $03, $0d, $20, $4f, $25, $3d, $26, $35, $43, $30, $30, $0d, $02, $08 ; 510 P%=$B00
    !byte $05, $20, $0d, $03, $e8, $0a, $5b, $4f, $50, $54, $20 ; 515 O%=$5C00
                                                    ; 520
                                                    ; 1000 [OPT

; ***************************************************************************************
;
; Table of room addresses
;
; Dec Hex  Name
; ---------------------------------------------------------------------------------------
;   0  00  Game Over screen
;   1  01  Watch Tower
;   2  02  Nomem Luni
;   3  03  On the Roof
;   4  04  Up on the Battlements
;   5  05  We must perform a Quirkafleeg
;   6  06  I'm sure I've seen this before
;   7  07  Rescue Esmerelda
;   8  08  On top of the house
;   9  09  Coservatory Roof
;  10  0a  Under the Roof
;  11  0b  The Attic
;  12  0c  Dr Jones will never believe this
;  13  0d  Emergency Generator
;  14  0e  Priests' Hole
;  15  0f  Above the West Bedroom
;  16  10  West Wing Roof
;  17  11  Orangery
;  18  12  A bit of tree
;  19  13  Master Bedroom
;  20  14  Top Landing
;  21  15  The Bathroom
;  22  16  Halfway up the East Wall
;  23  17  West Bedroom
;  24  18  West Wing
;  25  19  Swimming Pool
;  26  1a  The Banyan Tree
;  27  1b  The Nightmare Room
;  28  1c  First Landing
;  29  1d  The Chapel
;  30  1e  East Wall Base
;  31  1f  Back Door
;  32  20  Back Stairway
;  33  21  Cold Store
;  34  22  West of Kitchen
;  35  23  The Kitchen
;  36  24  To the Kitchens    Main Stairway
;  37  25  Ballroom West
;  38  26  Ballroom East
;  39  27  The Hall
;  40  28  The Front Door
;  41  29  Out on a limb
;  42  2a  Tree Top
;  43  2b  On a Branch Over the Drive
;  44  2c  Inside the Megatrunk
;  45  2d  Cuckoo's Nest
;  46  2e  The Bow
;  47  2f  The Yacht
;  48  30  The Beach
;  49  31  Tool Shed
;  50  32  The Wine Cellar
;  51  33  The Forgotten Abbey
;  52  34  The Security Guard
;  53  35  The Drive
;  54  36  At the Foot of the Megatree
;  55  37  Under the Megatree
;  56  38  The Bridge
;  57  39  The Off Licence
;  58  3a  Entrance to Hades
;  59  3b  Under the Drive
;  60  3c  Tree Root
;
; ***************************************************************************************

room_data_address_low_table
    !byte <(room_00_data - room_data_address_low_table)
    !byte <(room_01_data - room_data_address_low_table)
    !byte <(room_02_data - room_data_address_low_table)
    !byte <(room_03_data - room_data_address_low_table)
    !byte <(room_04_data - room_data_address_low_table)
    !byte <(room_05_data - room_data_address_low_table)
    !byte <(room_06_data - room_data_address_low_table)
    !byte <(room_07_data - room_data_address_low_table)
    !byte <(room_08_data - room_data_address_low_table)
    !byte <(room_09_data - room_data_address_low_table)
    !byte <(room_0a_data - room_data_address_low_table)
    !byte <(room_0b_data - room_data_address_low_table)
    !byte <(room_0c_data - room_data_address_low_table)
    !byte <(room_0d_data - room_data_address_low_table)
    !byte <(room_0e_data - room_data_address_low_table)
    !byte <(room_0f_data - room_data_address_low_table)
    !byte <(room_10_data - room_data_address_low_table)
    !byte <(room_11_data - room_data_address_low_table)
    !byte <(room_12_data - room_data_address_low_table)
    !byte <(room_13_data - room_data_address_low_table)
    !byte <(room_14_data - room_data_address_low_table)
    !byte <(room_15_data - room_data_address_low_table)
    !byte <(room_16_data - room_data_address_low_table)
    !byte <(room_17_data - room_data_address_low_table)
    !byte <(room_18_data - room_data_address_low_table)
    !byte <(room_19_data - room_data_address_low_table)
    !byte <(room_1a_data - room_data_address_low_table)
    !byte <(room_1b_data - room_data_address_low_table)
    !byte <(room_1c_data - room_data_address_low_table)
    !byte <(room_1d_data - room_data_address_low_table)
    !byte <(room_1e_data - room_data_address_low_table)
    !byte <(room_1f_data - room_data_address_low_table)
    !byte <(room_20_data - room_data_address_low_table)
    !byte <(room_21_data - room_data_address_low_table)
    !byte <(room_22_data - room_data_address_low_table)
    !byte <(room_23_data - room_data_address_low_table)
    !byte <(room_24_data - room_data_address_low_table)
    !byte <(room_25_data - room_data_address_low_table)
    !byte <(room_26_data - room_data_address_low_table)
    !byte <(room_27_data - room_data_address_low_table)
    !byte <(room_28_data - room_data_address_low_table)
    !byte <(room_29_data - room_data_address_low_table)
    !byte <(room_2a_data - room_data_address_low_table)
    !byte <(room_2b_data - room_data_address_low_table)
    !byte <(room_2c_data - room_data_address_low_table)
    !byte <(room_2d_data - room_data_address_low_table)
    !byte <(room_2e_data - room_data_address_low_table)
    !byte <(room_2f_data - room_data_address_low_table)
    !byte <(room_30_data - room_data_address_low_table)
    !byte <(room_31_data - room_data_address_low_table)
    !byte <(room_32_data - room_data_address_low_table)
    !byte <(room_33_data - room_data_address_low_table)
    !byte <(room_34_data - room_data_address_low_table)
    !byte <(room_35_data - room_data_address_low_table)
    !byte <(room_36_data - room_data_address_low_table)
    !byte <(room_37_data - room_data_address_low_table)
    !byte <(room_38_data - room_data_address_low_table)
    !byte <(room_39_data - room_data_address_low_table)
    !byte <(room_3a_data - room_data_address_low_table)
    !byte <(room_3b_data - room_data_address_low_table)
    !byte <(room_3c_data - room_data_address_low_table)

room_data_address_high_table
    !byte >(room_00_data - room_data_address_low_table)
    !byte >(room_01_data - room_data_address_low_table)
    !byte >(room_02_data - room_data_address_low_table)
    !byte >(room_03_data - room_data_address_low_table)
    !byte >(room_04_data - room_data_address_low_table)
    !byte >(room_05_data - room_data_address_low_table)
    !byte >(room_06_data - room_data_address_low_table)
    !byte >(room_07_data - room_data_address_low_table)
    !byte >(room_08_data - room_data_address_low_table)
    !byte >(room_09_data - room_data_address_low_table)
    !byte >(room_0a_data - room_data_address_low_table)
    !byte >(room_0b_data - room_data_address_low_table)
    !byte >(room_0c_data - room_data_address_low_table)
    !byte >(room_0d_data - room_data_address_low_table)
    !byte >(room_0e_data - room_data_address_low_table)
    !byte >(room_0f_data - room_data_address_low_table)
    !byte >(room_10_data - room_data_address_low_table)
    !byte >(room_11_data - room_data_address_low_table)
    !byte >(room_12_data - room_data_address_low_table)
    !byte >(room_13_data - room_data_address_low_table)
    !byte >(room_14_data - room_data_address_low_table)
    !byte >(room_15_data - room_data_address_low_table)
    !byte >(room_16_data - room_data_address_low_table)
    !byte >(room_17_data - room_data_address_low_table)
    !byte >(room_18_data - room_data_address_low_table)
    !byte >(room_19_data - room_data_address_low_table)
    !byte >(room_1a_data - room_data_address_low_table)
    !byte >(room_1b_data - room_data_address_low_table)
    !byte >(room_1c_data - room_data_address_low_table)
    !byte >(room_1d_data - room_data_address_low_table)
    !byte >(room_1e_data - room_data_address_low_table)
    !byte >(room_1f_data - room_data_address_low_table)
    !byte >(room_20_data - room_data_address_low_table)
    !byte >(room_21_data - room_data_address_low_table)
    !byte >(room_22_data - room_data_address_low_table)
    !byte >(room_23_data - room_data_address_low_table)
    !byte >(room_24_data - room_data_address_low_table)
    !byte >(room_25_data - room_data_address_low_table)
    !byte >(room_26_data - room_data_address_low_table)
    !byte >(room_27_data - room_data_address_low_table)
    !byte >(room_28_data - room_data_address_low_table)
    !byte >(room_29_data - room_data_address_low_table)
    !byte >(room_2a_data - room_data_address_low_table)
    !byte >(room_2b_data - room_data_address_low_table)
    !byte >(room_2c_data - room_data_address_low_table)
    !byte >(room_2d_data - room_data_address_low_table)
    !byte >(room_2e_data - room_data_address_low_table)
    !byte >(room_2f_data - room_data_address_low_table)
    !byte >(room_30_data - room_data_address_low_table)
    !byte >(room_31_data - room_data_address_low_table)
    !byte >(room_32_data - room_data_address_low_table)
    !byte >(room_33_data - room_data_address_low_table)
    !byte >(room_34_data - room_data_address_low_table)
    !byte >(room_35_data - room_data_address_low_table)
    !byte >(room_36_data - room_data_address_low_table)
    !byte >(room_37_data - room_data_address_low_table)
    !byte >(room_38_data - room_data_address_low_table)
    !byte >(room_39_data - room_data_address_low_table)
    !byte >(room_3a_data - room_data_address_low_table)
    !byte >(room_3b_data - room_data_address_low_table)
    !byte >(room_3c_data - room_data_address_low_table)

!if (<room_data_address_low_table != 0) {
    !error "room data address low table"
}

room_data
room_01_data                                        ; (Watch Tower)
    !byte $f2, $20, $98, $a1, $c9, $ef, $60, $77, $3f, $62, $67, $fb, $6e, $aa, $81, $8c ; items: 4 (1111)
    !byte $f8, $cb, $ae, $91, $78, $a0                                                   ; exits: left: $01, right: $01, up: $26, down: $05
    !byte $cc, $4a, $62, $c6, $82, $49, $26, $43, $66, $99, $b9, $71, $34, $ba, $4e, $96

    !byte $94, $16, $1d, $0a, $56, $1c, $79, $0a, $10, $21  ; conveyor: right, slope: /, rope: no
    !byte $0a, $5d, $56, $56, $6c, $d8, $f4, $47, $b1, $4f, $9d, $91, $89, $35, $fd, $55    ; tiles: $db (2), $dc (3), $88 (3), $df (1), $dd (2), $e0
    !byte $00                                       ; screen colours: 4 5 3 7
                                                    ; title tab 10, text "Watch Tower"
                                                    ; use WALL
                                                    ; move to (6,6)
                                                    ; vertical line, length 4
                                                    ; horizontal line, length 12
                                                    ; block, width 13, to y 0
                                                    ; move to (18,4)
                                                    ; block, width 19, to y 0
                                                    ; horizontal line, length 25
                                                    ; vertical line, length 6
                                                    ; move to (19,11)
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 11
                                                    ; use SLOPE
                                                    ; slope \, length 7
                                                    ; use DEADLY
                                                    ; series of 3 tiles at (10,5) (20,5) (24,5)
                                                    ; use PLATFORM
                                                    ; series of 5 tiles at (14,2) (15,2) (16,0) (17,0) (17,4)
                                                    ; use ITEM
                                                    ; series of 4 tiles at (10,6) (20,6) (24,6) (25,7)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $23 (1) at (15,9), range (11,19), moving l 2
                                                    ; $24 (2) at (13,6), range (11,31), moving r 2
                                                    ; arrows: no, no

room_02_data                                        ; (Nomem Luni)
    !byte $00, $c1, $10, $95, $dc, $04, $59, $18, $53, $96, $97, $1e, $a3, $ad, $33, $c4 ; items: 0
    !byte $3c, $5d, $ac, $38, $db, $da, $8d, $5b, $f7, $19, $24, $59, $e6, $e1, $9b, $0f ; exits: left: $02, right: $03, up: $02, down: $0a
    !byte $9f, $bc, $09, $35, $30, $17, $fd, $50, $32, $57, $b3, $ec, $35, $2d, $a7, $d0 ; conveyor: right, slope: /, rope: no
    !byte $a4, $5c, $9e, $fc, $e8, $d9, $37, $25, $a0, $23, $4f, $94, $20, $40, $ac, $13 ; tiles: $d2 (2), $d3 (1), $94 (3), $31 (1), $34 (2), $41
    !byte $c2, $c0, $20, $b3, $c2, $a9, $ab, $8a, $d6, $dc, $94, $01 ; screen colours: 0 3 4 7
                                                    ; title tab 11, text "Nomem Luni"
                                                    ; series of 12 tiles at (11,7) (12,7) (13,7) (15,9) (16,4)
                                                    ; (18,6) (19,3) (24,7) (27,3) (28,3)
                                                    ; (28,9) (29,9)
                                                    ; use WALL
                                                    ; move to (12,0)
                                                    ; block, width 29, to y 1
                                                    ; move to (31,0)
                                                    ; vertical line, length 4
                                                    ; block, width 29, to y 5
                                                    ; horizontal line, length 26
                                                    ; move to (23,10)
                                                    ; block, width 22, to y 9
                                                    ; block, width 20, to y 2
                                                    ; block, width 18, to y 9
                                                    ; series of 4 tiles at (25,3) (30,2) (30,6) (31,6)
                                                    ; move to (9,0)
                                                    ; use SLOPE
                                                    ; slope /, length 4
                                                    ; done
                                                    ; enemies: 4
                                                    ; $14 (3) at (16,4), range (0,8), moving d 2
                                                    ; $24 (1) at (4,3), range (0,12), moving l 2
                                                    ; $26 (2) at (20,3), range (18,23), moving r 2
                                                    ; $28 (3) at (22,11), range (7,12), moving u 4
                                                    ; arrows: no, no

room_03_data                                        ; (On the Roof)
    !byte $18, $42, $60, $f8, $7b, $2b, $ca, $2b, $c8, $ca, $89, $59, $44, $39, $7b, $ff ; items: 1 (1)
    !byte $8b, $ce, $d1, $03, $07, $db, $10, $8e, $1a, $8d, $71, $38, $0d, $66, $cd, $8e ; exits: left: $02, right: $04, up: $03, down: $03
    !byte $f9, $46, $56, $88, $12, $a1, $44, $f1, $38, $5a, $21, $46, $d9, $e0, $89, $eb ; conveyor: right, slope: \, rope: yes
    !byte $74, $61, $f2, $43, $bb, $ae, $9d, $48, $00 ; tiles: $46 (3), $4e (2), $4d (3), $50 (1), $4f (3), $51
                                                    ; screen colours: 0 1 2 3
                                                    ; title tab 10, text "On the Roof"
                                                    ; use WALL
                                                    ; block, width 3, to y 6
                                                    ; block, width 4, to y 3
                                                    ; horizontal line, length 10
                                                    ; block, width 11, to y 1
                                                    ; horizontal line, length 14
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 22
                                                    ; use WALL
                                                    ; horizontal line, length 26
                                                    ; block, width 27, to y 8
                                                    ; block, width 31, to y 6
                                                    ; use DEADLY
                                                    ; series of 5 tiles at (4,5) (4,4) (5,2) (5,1) (28,7)
                                                    ; use SLOPE
                                                    ; series of 5 tiles at (4,6) (5,3) (12,1) (28,8) (29,7)
                                                    ; use ITEM
                                                    ; series of 1 tile at (25,3)
                                                    ; done
                                                    ; enemies: 1
                                                    ; $1b (1) at (21,13), range (13,25), moving l 2
                                                    ; arrows: no, no

room_04_data                                        ; (Up on the Battlements)
    !byte $18, $46, $11, $44, $db, $89, $48, $cb, $48, $4a, $49, $5b, $84, $15, $7f, $9d ; items: 1 (1)
    !byte $bd, $ff, $41, $90, $b3, $26, $86, $d8, $9c, $0e, $1c, $6c, $e1, $23, $2d, $76 ; exits: left: $03, right: $05, up: $04, down: $04
    !byte $a2, $a6, $4e, $b7, $ec, $f9, $06, $1c, $58, $6a, $d2, $42, $15, $96, $4a, $b4 ; conveyor: left, slope: \, rope: no
    !byte $10, $2d, $13, $53, $96, $6c, $18, $d6, $5a, $22, $5d, $f8, $fd, $a4, $a4, $41 ; tiles: $4b (2), $4a (3), $49 (2), $4c (1), $4b (3), $44
    !byte $ed, $ac, $d4, $45, $ed, $b2, $cc, $46, $ed, $b9, $9c, $4a, $cc, $b7, $03 ; screen colours: 0 1 2 3
                                                    ; title tab 6, text "Up on the Battlements"
                                                    ; use WALL
                                                    ; block, width 3, to y 6
                                                    ; horizontal line, length 7
                                                    ; block, width 9, to y 6
                                                    ; horizontal line, length 13
                                                    ; block, width 17, to y 5
                                                    ; horizontal line, length 21
                                                    ; block, width 23, to y 6
                                                    ; horizontal line, length 27
                                                    ; block, width 31, to y 6
                                                    ; use PLATFORM
                                                    ; move to (24,1)
                                                    ; vertical line, length 5
                                                    ; move to (18,5)
                                                    ; vertical line, length 1
                                                    ; move to (10,1)
                                                    ; vertical line, length 5
                                                    ; move to (4,5)
                                                    ; vertical line, length 1
                                                    ; use SLOPE
                                                    ; series of 4 tiles at (4,6) (10,6) (18,6) (24,6)
                                                    ; use CONVEYOR
                                                    ; move to (13,6)
                                                    ; horizontal line, length 17
                                                    ; use ITEM
                                                    ; series of 1 tile at (31,11)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $29 (2) at (5,8), range (5,13), moving d 1
                                                    ; $29 (1) at (11,10), range (5,13), moving d 2
                                                    ; $29 (3) at (19,6), range (5,13), moving d 4
                                                    ; $29 (1) at (25,5), range (4,12), moving d 7
                                                    ; arrows: yes (7,0), no

room_05_data                                        ; (We must perform a Quirkafleeg)
    !byte $18, $c1, $40, $f4, $7b, $8b, $88, $4b, $4a, $88, $89, $2e, $04, $35, $72, $4d ; items: 1 (1)
    !byte $49, $f9, $7a, $12, $a9, $8b, $e6, $82, $17, $8a, $88, $0a, $50, $4d, $08, $3b ; exits: left: $04, right: $06, up: $01, down: $05
    !byte $70, $b0, $91, $6c, $38, $df, $24, $00, $ca, $50, $19, $5d, $f8, $fd, $30, $61 ; conveyor: right, slope: \, rope: yes
    !byte $0a, $04, $12                             ; tiles: $45 (3), $46 (2), $48 (3), $49 (1), $47 (3), $44
                                                    ; screen colours: 0 1 4 6
                                                    ; title tab 2, text "We must perform a Quirkafleeg"
                                                    ; use WALL
                                                    ; block, width 3, to y 6
                                                    ; use DEADLY
                                                    ; horizontal line, length 27
                                                    ; use WALL
                                                    ; block, width 31, to y 6
                                                    ; move to (4,0)
                                                    ; use PLATFORM
                                                    ; vertical line, length 6
                                                    ; use SLOPE
                                                    ; vertical line, length 6
                                                    ; use ITEM
                                                    ; series of 1 tile at (31,11)
                                                    ; done
                                                    ; enemies: 1
                                                    ; $24 (1) at (6,5), range (0,8), moving l 2
                                                    ; arrows: no, no

room_06_data                                        ; (I'm sure I've seen this before)
    !byte $18, $c5, $31, $6c, $b9, $8b, $48, $cb, $c8, $12, $ca, $5f, $0c, $8a, $6d, $6e ; items: 1 (1)
    !byte $2a, $91, $3c, $b1, $2b, $b9, $89, $10, $7b, $33, $17, $e9, $42, $42, $5d, $24 ; exits: left: $05, right: $07, up: $06, down: $06
    !byte $07, $0e, $b6, $f0, $91, $16, $3b, $d1, $52, $a7, $5b, $f6, $7c, $03, $0e, $2c ; conveyor: right, slope: \, rope: no
    !byte $35, $69, $a1, $0a, $4b, $25, $5a, $88, $96, $89, $29, $4b, $36, $8c, $2e, $fc ; tiles: $4f (3), $21 (1), $4d (3), $4c (1), $4b (2), $44
    !byte $7e, $5a, $d2, $60, $f6, $54, $ea, $a2, $76, $59, $66, $23, $f6, $5c, $4e, $a5 ; screen colours: 4 1 2 7
    !byte $76, $96, $10, $01, $0a, $35, $b1, $04    ; title tab 1, text "I'm sure I've seen this before"
                                                    ; use WALL
                                                    ; block, width 3, to y 6
                                                    ; horizontal line, length 7
                                                    ; block, width 9, to y 6
                                                    ; horizontal line, length 13
                                                    ; block, width 17, to y 6
                                                    ; horizontal line, length 21
                                                    ; block, width 23, to y 6
                                                    ; horizontal line, length 27
                                                    ; block, width 31, to y 6
                                                    ; use PLATFORM
                                                    ; move to (24,1)
                                                    ; vertical line, length 5
                                                    ; move to (18,5)
                                                    ; vertical line, length 1
                                                    ; move to (10,1)
                                                    ; vertical line, length 5
                                                    ; move to (4,5)
                                                    ; vertical line, length 1
                                                    ; use SLOPE
                                                    ; series of 4 tiles at (4,6) (10,6) (18,6) (24,6)
                                                    ; use ITEM
                                                    ; series of 1 tile at (31,11)
                                                    ; done
                                                    ; enemies: 5
                                                    ; $29 (2) at (5,8), range (6,13), moving d 4
                                                    ; $29 (1) at (11,10), range (5,13), moving d 2
                                                    ; $29 (3) at (19,6), range (4,13), moving d 4
                                                    ; $29 (2) at (25,5), range (5,13), moving d 1
                                                    ; $24 (2) at (4,4), range (0,10), moving l 2
                                                    ; arrows: yes (9,0), yes (10,2)

room_07_data                                        ; (Rescue Esmerelda)
    !byte $34, $46, $64, $6c, $6a, $17, $90, $e2, $ef, $e6, $e5, $bb, $c3, $88, $24, $a1 ; items: 2 (11)
    !byte $42, $1e, $49, $86, $44, $a2, $31, $38, $70, $b0, $85, $8f, $b6, $f8, $c9, $66 ; exits: left: $06, right: $08, up: $26, down: $0d
    !byte $96, $0f, $f8, $20, $df, $cf, $55, $fe, $ad, $77, $7d, $95, $db, $d2, $5c, $70 ; conveyor: right, slope: /, rope: no
    !byte $18, $79, $b9, $cc, $ed, $a7, $16, $99, $39, $93, $21, $28, $d5, $69, $61, $21 ; tiles: $3e (3), $3d (1), $bb (3), $3f (2), $4a (2), $40
    !byte $76, $77, $06, $5d, $5c, $bb, $e6, $49, $49, $82, $d9, $55, $69, $92, $da, $65 ; screen colours: 1 4 3 7
    !byte $42, $14, $58, $a4, $38, $10, $a0, $35    ; title tab 8, text "Rescue Esmerelda"
                                                    ; use WALL
                                                    ; block, width 3, to y 6
                                                    ; horizontal line, length 7
                                                    ; block, width 11, to y 6
                                                    ; horizontal line, length 15
                                                    ; block, width 19, to y 6
                                                    ; move to (19,4)
                                                    ; triangle /, length 0
                                                    ; move to (30,0)
                                                    ; horizontal line, length 31
                                                    ; move to (31,3)
                                                    ; vertical line, length 10
                                                    ; move to (31,13)
                                                    ; vertical line, length 15
                                                    ; move to (26,15)
                                                    ; vertical line, length 10
                                                    ; move to (27,6)
                                                    ; horizontal line, length 22
                                                    ; move to (26,0)
                                                    ; slope /, length 3
                                                    ; use SLOPE
                                                    ; move to (29,3)
                                                    ; vertical line, length 6
                                                    ; move to (27,7)
                                                    ; slope /, length 10
                                                    ; series of 2 tiles at (6,6) (14,6)
                                                    ; move to (6,1)
                                                    ; use PLATFORM
                                                    ; vertical line, length 5
                                                    ; move to (14,5)
                                                    ; vertical line, length 1
                                                    ; vertical line, length 1
                                                    ; use CONVEYOR
                                                    ; move to (27,11)
                                                    ; horizontal line, length 24
                                                    ; use ITEM
                                                    ; series of 2 tiles at (26,13) (26,12)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $29 (2) at (4,8), range (6,13), moving d 2
                                                    ; $29 (1) at (12,9), range (5,13), moving d 2
                                                    ; $24 (1) at (4,5), range (0,13), moving l 2
                                                    ; $11 (3) at (24,1), range (0,2), moving d 2
                                                    ; arrows: no, no

room_08_data                                        ; (On top of the house)
    !byte $18, $27, $4e, $2e, $79, $8f, $4a, $49, $76, $0f, $0f, $bd, $4c, $3a, $7b, $b3 ; items: 1 (1)
    !byte $f3, $d7, $d1, $fb, $2f, $77, $25, $91, $03, $a3, $d5, $3c, $58, $c4, $fe, $61 ; exits: left: $07, right: $08, up: $39, down: $0e
    !byte $01, $57, $2d, $e1, $12, $aa, $15, $08, $ab, $48, $a3, $a7, $4c, $4d, $ab, $1f ; conveyor: right, slope: /, rope: no
    !byte $ca, $59, $80, $5d, $02                   ; tiles: $c2 (3), $c3 (2), $bb (3), $49 (1), $4a (2), $c5
                                                    ; screen colours: 4 1 5 7
                                                    ; title tab 9, text "On top of the house"
                                                    ; use WALL
                                                    ; horizontal line, length 11
                                                    ; move to (11,3)
                                                    ; block, width 3, to y 4
                                                    ; move to (3,7)
                                                    ; triangle /, length 3
                                                    ; move to (0,3)
                                                    ; vertical line, length 10
                                                    ; series of 3 tiles at (3,10) (8,5) (11,5)
                                                    ; use PLATFORM
                                                    ; move to (1,10)
                                                    ; vertical line, length 2
                                                    ; move to (12,5)
                                                    ; slope /, length 10
                                                    ; move to (18,11)
                                                    ; use ITEM
                                                    ; vertical line, length 11
                                                    ; done
                                                    ; enemies: 1
                                                    ; $13 (1) at (19,4), range (0,13), moving d 2
                                                    ; arrows: no, no

room_09_data                                        ; (Coservatory Roof)
    !byte $f2, $24, $05, $89, $e8, $76, $70, $a0, $37, $a6, $bf, $ef, $15, $02, $b9, $44 ; items: 4 (1111)
    !byte $62, $05, $d9, $c5, $f1, $a2, $73, $f4, $80, $85, $06, $7e, $cc, $2a, $ca, $c8 ; exits: left: $09, right: $0a, up: $02, down: $11
    !byte $c2, $f9, $fe, $80, $29, $17, $c8, $d2, $f6, $e1, $d5, $e9, $72, $f3, $e9, $c7 ; conveyor: left, slope: /, rope: no
    !byte $bf, $3f, $a2, $53, $c7, $8f, $22, $87, $86, $af, $06 ; tiles: $be (1), $bf (3), $8c (2), $bd (3), $c0 (2), $c1
                                                    ; screen colours: 0 2 5 7
                                                    ; title tab 8, text "Coservatory Roof" (sic)
                                                    ; use PLATFORM
                                                    ; series of 1 tile at (22,0)
                                                    ; move to (31,1)
                                                    ; horizontal line, length 26
                                                    ; vertical line, length 2
                                                    ; horizontal line, length 24
                                                    ; horizontal line, length 26
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 31
                                                    ; move to (31,8)
                                                    ; use WALL
                                                    ; horizontal line, length 20
                                                    ; slope \, length 0
                                                    ; use DEADLY
                                                    ; series of 3 tiles at (27,7) (24,7) (21,7)
                                                    ; use ITEM
                                                    ; series of 4 tiles at (22,7) (25,7) (28,7) (31,7)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $0b (2) at (18,11), range (17,31), moving l 2
                                                    ; $09 (3) at (24,5), range (16,31), moving r 2
                                                    ; arrows: no, no

room_0a_data                                        ; (Under the Roof)
    !byte $40, $d2, $90, $84, $dc, $a4, $bb, $7a, $e2, $3b, $3b, $2e, $26, $8b, $c5, $24 ; items: 0
    !byte $de, $ff, $a2, $73, $f4, $08, $68, $10, $86, $4a, $22, $7c, $5d, $b0, $64, $8d ; exits: left: $09, right: $0b, up: $02, down: $12
    !byte $81, $32, $17, $e8, $32, $44, $f5, $37, $60, $70, $80, $06, $c6, $8a, $26, $71 ; conveyor: left, slope: /, rope: no
    !byte $3e, $d1, $7c, $f2, $b4, $cd, $75, $6d, $86, $71, $e3, $97, $c3, $cd, $2b, $53 ; tiles: $b8 (2), $b9 (1), $8f (3), $bc (1), $ba (2), $4b
    !byte $e7, $51, $44, $12, $30, $34, $1b, $d2, $64, $95, $4c ; screen colours: 4 1 2 7
                                                    ; title tab 9, text "Under the Roof"
                                                    ; move to (0,2)
                                                    ; block, width 2, to y 1
                                                    ; horizontal line, length 5
                                                    ; move to (4,8)
                                                    ; horizontal line, length 7
                                                    ; series of 8 tiles at (8,3) (9,3) (11,1) (16,2) (19,3) (20,0)
                                                    ; (23,4) (24,4)
                                                    ; move to (10,15)
                                                    ; slope \, length 8
                                                    ; use WALL
                                                    ; horizontal line, length 3
                                                    ; horizontal line, length 0
                                                    ; move to (12,0)
                                                    ; block, width 13, to y 4
                                                    ; move to (12,9)
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 31
                                                    ; use DEADLY
                                                    ; move to (12,15)
                                                    ; horizontal line, length 19
                                                    ; block, width 22, to y 13
                                                    ; horizontal line, length 29
                                                    ; move to (26,13)
                                                    ; horizontal line, length 24
                                                    ; move to (17,13)
                                                    ; horizontal line, length 15
                                                    ; series of 4 tiles at (16,14) (25,14) (20,12) (21,12)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $22 (3) at (4,9), range (0,6), moving l 2
                                                    ; $0d (2) at (16,9), range (12,19), moving r 2
                                                    ; arrows: no, yes (3,1)

room_0b_data                                        ; (The Attic)
    !byte $40, $31, $b4, $8c, $dc, $a5, $5b, $db, $24, $5a, $9a, $2d, $a2, $fe, $03, $39 ; items: 0
    !byte $0b, $74, $f2, $05, $19, $bb, $85, $10, $31, $52, $e4, $c9, $b3, $17, $ad, $da ; exits: left: $0a, right: $0c, up: $0b, down: $13
    !byte $f8, $fb, $73, $b8, $4e, $52, $27, $05, $01, $06, $3c, $14, $78, $20, $c0, $81 ; conveyor: left, slope: /, rope: no
    !byte $41, $56, $38, $1a, $0c, $48, $4a, $17, $76, $7b, $c6, $33, $1e, $07, $d7, $2b ; tiles: $b3 (3), $b4 (1), $48 (3), $b6 (1), $b5 (2), $4b
    !byte $9e, $26, $d7, $4b, $9e, $17, $d7, $6b, $5e, $36, $d7, $29, $5e, $17, $d7, $49 ; screen colours: 0 1 2 3
    !byte $c1, $26, $d7, $e9, $92, $26              ; title tab 10, text "The Attic"
                                                    ; horizontal line, length 31
                                                    ; move to (0,9)
                                                    ; horizontal line, length 13
                                                    ; series of 11 tiles at (2,1) (2,3) (2,5) (2,7) (18,7) (19,7)
                                                    ; (20,5) (21,5) (22,3) (31,7) (30,7)
                                                    ; use WALL
                                                    ; series of 8 tiles at (4,9) (11,9) (5,0) (8,0) (12,0) (15,0)
                                                    ; (20,0) (30,0)
                                                    ; move to (0,1)
                                                    ; block, width 1, to y 8
                                                    ; use DEADLY
                                                    ; series of 5 tiles at (7,1) (12,1) (16,1) (4,10) (11,10)
                                                    ; use CONVEYOR
                                                    ; move to (27,7)
                                                    ; horizontal line, length 24
                                                    ; done
                                                    ; enemies: 6
                                                    ; $0f (2) at (3,8), range (7,11), moving d 2
                                                    ; $0f (1) at (5,9), range (7,11), moving d 2
                                                    ; $0f (3) at (7,10), range (7,11), moving d 2
                                                    ; $0f (2) at (9,11), range (7,11), moving u 2
                                                    ; $0f (1) at (11,10), range (7,11), moving u 2
                                                    ; $10 (3) at (13,9), range (7,11), moving u 2
                                                    ; arrows: yes (4,4), yes (6,2)

room_0c_data                                        ; (Dr Jones will never believe this)
    !byte $98, $66, $51, $46, $f7, $36, $d5, $37, $36, $d4, $d5, $5e, $04, $e0, $f8, $a4 ; items: 1 (1)
    !byte $b3, $24, $dd, $26, $b4, $be, $96, $54, $12, $2f, $24, $5a, $90, $4a, $6e, $e6 ; exits: left: $0b, right: $0d, up: $05, down: $0c
    !byte $22, $1d, $9c, $0f, $64, $31, $dc, $47, $b2, $b6, $c7, $57, $e2, $a4, $d2, $63 ; conveyor: left, slope: \, rope: no
    !byte $f1, $3e, $70, $e8, $48, $09, $53, $91, $a8, $d0, $8a, $35, $1b, $5e, $bd, $fb ; tiles: $ad (1), $ae (3), $b0 (3), $b1 (2), $af (3), $b2
    !byte $8c, $98, $ab, $e8, $52, $e5, $41, $97, $a1, $02, $c3, $cb, $86, $a9, $2c, $c3 ; screen colours: 0 1 2 7
    !byte $47, $55, $4c, $49, $cd, $f8, $4d, $34, $60, $e5, $44, $9b, $1c, $47, $c9, $12 ; title tab 0, text "Dr Jones will never believe this"
    !byte $2b, $53, $66, $e9, $42, $8e, $47, $4a, $2a, $61, $93, $85, $1a, $6e, $4a, $00 ; use CONVEYOR
                                                    ; horizontal line, length 31
                                                    ; use PLATFORM
                                                    ; move to (6,8)
                                                    ; block, width 7, to y 7
                                                    ; block, width 9, to y 3
                                                    ; move to (13,11)
                                                    ; block, width 15, to y 10
                                                    ; horizontal line, length 17
                                                    ; block, width 18, to y 10
                                                    ; move to (15,1)
                                                    ; vertical line, length 3
                                                    ; series of 16 tiles at (0,7) (1,7) (2,5) (4,3) (5,4) (9,1)
                                                    ; (10,1) (13,4) (13,6) (13,8) (15,5)
                                                    ; (15,7) (15,9) (17,1) (19,10) (20,5)
                                                    ; series of 3 tiles at (21,3) (24,2) (29,3)
                                                    ; use WALL
                                                    ; move to (8,1)
                                                    ; horizontal line, length 7
                                                    ; vertical line, length 6
                                                    ; block, width 6, to y 5
                                                    ; move to (6,9)
                                                    ; horizontal line, length 7
                                                    ; block, width 10, to y 10
                                                    ; horizontal line, length 12
                                                    ; vertical line, length 4
                                                    ; vertical line, length 12
                                                    ; block, width 15, to y 13
                                                    ; horizontal line, length 17
                                                    ; move to (16,1)
                                                    ; vertical line, length 9
                                                    ; block, width 17, to y 6
                                                    ; block, width 19, to y 8
                                                    ; slope /, length 5
                                                    ; use DEADLY
                                                    ; series of 3 tiles at (6,10) (12,10) (12,13)
                                                    ; use ITEM
                                                    ; series of 1 tile at (19,8)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $14 (1) at (18,10), range (8,13), moving u 2
                                                    ; $28 (2) at (10,12), range (7,12), moving u 4
                                                    ; arrows: no, no

room_0d_data                                        ; (Emergency Generator)
    !byte $c0, $70, $28, $8b, $35, $09, $aa, $6a, $80, $2b, $2b, $4e, $c7, $89, $21, $91 ; items: 0
    !byte $11, $8b, $c6, $63, $c4, $92, $08, $b2, $8b, $07, $86, $cc, $e6, $7c, $7f, $e5 ; exits: left: $0c, right: $0e, up: $05, down: $0d
    !byte $f9, $7f, $de, $4a, $65, $84, $e2, $74, $38, $4b, $fd, $48, $2a, $65, $05, $86 ; conveyor: left, slope: /, rope: no
    !byte $9b, $b3, $66, $d8, $55, $ba, $ca, $45, $90, $a5, $44, $9d, $86, $3c, $d4, $39 ; tiles: $a8 (1), $a9 (2), $03 (1), $ac (1), $aa (3), $20
    !byte $d3, $8f, $02                             ; screen colours: 4 3 1 7
                                                    ; title tab 7, text "Emergency Generator"
                                                    ; use WALL
                                                    ; horizontal line, length 4
                                                    ; block, width 27, to y 3
                                                    ; horizontal line, length 31
                                                    ; move to (31,10)
                                                    ; horizontal line, length 30
                                                    ; move to (31,15)
                                                    ; block, width 30, to y 13
                                                    ; move to (5,4)
                                                    ; block, width 8, to y 5
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 23
                                                    ; use WALL
                                                    ; block, width 26, to y 5
                                                    ; move to (31,1)
                                                    ; use DEADLY
                                                    ; vertical line, length 9
                                                    ; move to (6,10)
                                                    ; use PLATFORM
                                                    ; block, width 7, to y 6
                                                    ; move to (25,10)
                                                    ; block, width 24, to y 6
                                                    ; slope \, length 5
                                                    ; use ITEM
                                                    ; series of 6 tiles at (7,4) (8,2) (13,2) (18,2) (23,2) (24,4)
                                                    ; done
                                                    ; enemies: 1
                                                    ; $17 (2) at (7,3), range (5,31), moving l 2
                                                    ; arrows: no, no

room_0e_data                                        ; (Priests' Hole)
    !byte $98, $e5, $38, $2d, $79, $97, $4b, $49, $4a, $94, $95, $7a, $42, $fa, $28, $48 ; items: 1 (1)
    !byte $ca, $69, $3f, $ee, $34, $39, $70, $60, $a9, $60, $34, $ab, $7e, $b4, $09, $7e ; exits: left: $0d, right: $0e, up: $0e, down: $16
    !byte $e0, $82, $6d, $0e, $04, $b1, $e2, $10, $8e, $4b, $b2, $60, $59, $a2, $50, $e1 ; conveyor: right, slope: /, rope: no
    !byte $a2, $0b, $72, $9f, $f8, $c4, $81, $89, $06, $cc, $81, $89, $86, $34, $91, $8b ; tiles: $a5 (3), $a6 (2), $48 (3), $49 (1), $4a (2), $a7
    !byte $26, $b5, $c4, $40, $02                   ; screen colours: 0 2 6 3
                                                    ; title tab 9, text "Priests' Hole"
                                                    ; use WALL
                                                    ; block, width 1, to y 10
                                                    ; move to (10,0)
                                                    ; block, width 11, to y 3
                                                    ; move to (10,15)
                                                    ; block, width 11, to y 6
                                                    ; move to (0,15)
                                                    ; block, width 1, to y 13
                                                    ; use PLATFORM
                                                    ; series of 12 tiles at (7,0) (4,1) (3,5) (3,8) (8,7) (3,10)
                                                    ; (9,3) (8,3) (9,10) (8,10) (2,10) (3,10)
                                                    ; use ITEM
                                                    ; series of 1 tile at (9,13)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $1f (1) at (4,7), range (0,12), moving u 1
                                                    ; $20 (1) at (6,7), range (0,12), moving u 1
                                                    ; $21 (1) at (5,9), range (2,14), moving u 1
                                                    ; $24 (1) at (21,10), range (8,24), moving l 2
                                                    ; arrows: no, no

room_0f_data                                        ; (Above the West Bedroom)
    !byte $98, $17, $78, $3d, $fb, $7d, $bc, $4b, $86, $6c, $be, $5d, $04, $03, $e8, $2a ; items: 1 (1)
    !byte $b9, $ff, $35, $92, $f2, $83, $04, $47, $e7, $cc, $71, $43, $8a, $3f, $33, $4b ; exits: left: $0f, right: $10, up: $0f, down: $17
    !byte $f2, $53, $16, $25, $28, $72, $e4, $45, $68, $c0, $89, $40, $56, $13, $65, $ae ; conveyor: right, slope: /, rope: no
    !byte $da, $ac, $fb, $08, $ba, $d0, $ed, $91, $e9, $01, $98, $69, $a9, $0d, $da, $3e ; tiles: $f6 (2), $d9 (3), $84 (3), $49 (1), $f7 (3), $f8
                                                    ; screen colours: 0 1 2 7
                                                    ; title tab 3, text "Above the West Bedroom"
                                                    ; move to (27,0)
                                                    ; horizontal line, length 20
                                                    ; move to (31,9)
                                                    ; horizontal line, length 25
                                                    ; vertical line, length 4
                                                    ; horizontal line, length 31
                                                    ; horizontal line, length 20
                                                    ; series of 2 tiles at (9,0) (10,2)
                                                    ; move to (24,9)
                                                    ; slope \, length 1
                                                    ; use WALL
                                                    ; move to (16,1)
                                                    ; block, width 17, to y 0
                                                    ; use DEADLY
                                                    ; series of 6 tiles at (18,2) (19,3) (21,5) (22,6) (23,7) (24,8)
                                                    ; use ITEM
                                                    ; series of 1 tile at (23,6)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $19 (1) at (15,0), range (0,12), moving d 1
                                                    ; $29 (3) at (11,6), range (1,13), moving u 7
                                                    ; arrows: no, no

room_10_data                                        ; (West Wing Roof)
    !byte $f2, $bc, $28, $18, $c9, $f3, $f5, $59, $12, $f8, $e9, $d1, $2a, $b2, $91, $94 ; items: 4 (1111)
    !byte $5f, $13, $96, $bd, $e8, $1c, $3d, $82, $0c, $29, $cf, $97, $41, $ce, $e1, $55 ; exits: left: $0f, right: $11, up: $10, down: $18
    !byte $20, $50, $10, $60, $fa, $f0, $00, $4a, $60, $68, $92, $15, $19, $36, $52, $b4 ; conveyor: right, slope: /, rope: no
    !byte $d8, $41, $97, $99, $4a, $cc, $b4, $e5, $91, $96, $97, $77, $54, $52, $5a, $3f ; tiles: $f1 (1), $f2 (2), $03 (3), $49 (1), $f3 (2), $f5
    !byte $b4, $45                                  ; screen colours: 0 5 2 3
                                                    ; title tab 9, text "West Wing Roof"
                                                    ; move to (0,9)
                                                    ; horizontal line, length 4
                                                    ; vertical line, length 7
                                                    ; horizontal line, length 31
                                                    ; move to (6,0)
                                                    ; horizontal line, length 28
                                                    ; slope /, length 3
                                                    ; series of 6 tiles at (0,4) (1,4) (2,0) (3,2) (31,0) (30,0)
                                                    ; use WALL
                                                    ; move to (4,0)
                                                    ; block, width 5, to y 9
                                                    ; use DEADLY
                                                    ; series of 5 tiles at (9,8) (13,8) (18,8) (22,8) (27,8)
                                                    ; use ITEM
                                                    ; series of 4 tiles at (6,5) (9,1) (19,2) (27,4)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $16 (2) at (19,13), range (7,23), moving l 2
                                                    ; $24 (3) at (20,11), range (11,30), moving l 2
                                                    ; arrows: no, yes (10,1)

room_11_data                                        ; (Orangery)
    !byte $7c, $41, $22, $4d, $d4, $56, $22, $50, $1c, $51, $90, $7f, $11, $e3, $22, $b0 ; items: 3 (111)
    !byte $8c, $c4, $71, $60, $78, $68, $a9, $c0, $03, $81, $4b, $f3, $4b, $72, $f6, $99 ; exits: left: $10, right: $12, up: $09, down: $19
    !byte $70, $d1, $64, $d4, $79, $90, $50, $d9, $0a, $b6, $9c, $3c, $eb, $a4, $87, $00 ; conveyor: left, slope: /, rope: no
    !byte $63, $fd, $8a, $73, $04, $74, $9e, $2e, $31, $0a, $79, $ee, $91, $22, $8b, $bb ; tiles: $9f (2), $a0 (1), $88 (3), $a3 (2), $40 (2), $a4
    !byte $24, $51, $14, $98, $b3, $4e              ; screen colours: 0 1 2 7
                                                    ; title tab 12, text "Orangery"
                                                    ; use WALL
                                                    ; horizontal line, length 7
                                                    ; horizontal line, length 5
                                                    ; vertical line, length 5
                                                    ; move to (0,7)
                                                    ; horizontal line, length 1
                                                    ; use PLATFORM
                                                    ; move to (26,5)
                                                    ; horizontal line, length 31
                                                    ; vertical line, length 4
                                                    ; horizontal line, length 28
                                                    ; series of 16 tiles at (6,4) (7,4) (11,2) (12,5) (14,7) (16,4)
                                                    ; (16,10) (19,6) (20,1) (22,9) (25,3)
                                                    ; (25,10) (28,9) (15,0) (16,0) (24,13)
                                                    ; move to (31,5)
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 28
                                                    ; move to (0,2)
                                                    ; slope /, length 15
                                                    ; use ITEM
                                                    ; series of 3 tiles at (6,2) (16,9) (28,14)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $14 (1) at (9,10), range (7,14), moving u 2
                                                    ; $08 (3) at (20,5), range (0,12), moving d 4
                                                    ; arrows: no, yes (7,1)

room_12_data                                        ; (A bit of tree)
    !byte $20, $ca, $94, $15, $cd, $04, $73, $f9, $f3, $72, $b2, $2d, $42, $c0, $85, $22 ; items: 0
    !byte $5f, $47, $6f, $8e, $84, $1c, $a8, $85, $31, $4f, $fc, $50, $0f, $04, $1a, $6a ; exits: left: $11, right: $13, up: $0a, down: $1a
    !byte $d0, $b8, $7d, $07, $1a, $94, $49, $93, $21, $9b, $25, $cd, $44, $99, $4a, $f7 ; conveyor: right, slope: /, rope: no
    !byte $1c, $39, $78, $d8, $16, $8b, $1d, $7f, $94, $20, $02, $1a, $8d, $72, $a7, $7a ; tiles: $9b (2), $9c (1), $9e (2), $3f (1), $9d (1), $41
    !byte $d9, $00                                  ; screen colours: 0 1 2 3
                                                    ; title tab 4, text "A bit of tree"
                                                    ; use WALL
                                                    ; move to (13,0)
                                                    ; block, width 12, to y 15
                                                    ; use DEADLY
                                                    ; move to (31,0)
                                                    ; vertical line, length 15
                                                    ; use PLATFORM
                                                    ; move to (0,5)
                                                    ; horizontal line, length 5
                                                    ; move to (16,5)
                                                    ; horizontal line, length 14
                                                    ; series of 16 tiles at (14,0) (11,0) (10,6) (9,6) (9,8) (9,11)
                                                    ; (6,9) (5,9) (18,2) (19,2) (20,11) (23,9)
                                                    ; (24,9) (24,3) (24,6) (27,4)
                                                    ; move to (20,6)
                                                    ; slope /, length 7
                                                    ; done
                                                    ; enemies: 2
                                                    ; $24 (3) at (2,2), range (0,11), moving l 2
                                                    ; $05 (1) at (7,7), range (5,11), moving d 2
                                                    ; arrows: yes (6,0), no

room_13_data                                        ; (Master Bedroom)
    !byte $20, $29, $b2, $ac, $cb, $32, $32, $b2, $88, $d3, $d3, $be, $22, $0d, $48, $99 ; items: 0
    !byte $c4, $07, $09, $8e, $ce, $99, $03, $27, $a1, $ff, $e3, $c7, $69, $c0, $40, $00 ; exits: left: $12, right: $14, up: $13, down: $13
    !byte $7e, $48, $36, $e3, $a5, $40, $2c, $e5, $20, $b2, $80, $e4, $21, $ec, $1a, $00 ; conveyor: left, slope: \, rope: no
    !byte $30                                       ; tiles: $96 (2), $97 (1), $23 (2), $9a (2), $98 (3), $98
                                                    ; screen colours: 0 5 6 7
                                                    ; title tab 9, text "Master Bedroom"
                                                    ; use WALL
                                                    ; block, width 18, to y 1
                                                    ; move to (31,15)
                                                    ; horizontal line, length 15
                                                    ; block, width 14, to y 5
                                                    ; horizontal line, length 0
                                                    ; block, width 1, to y 0
                                                    ; use PLATFORM
                                                    ; move to (31,0)
                                                    ; horizontal line, length 19
                                                    ; move to (19,1)
                                                    ; slope \, length 2
                                                    ; horizontal line, length 1
                                                    ; use CONVEYOR
                                                    ; move to (5,3)
                                                    ; horizontal line, length 2
                                                    ; use DEADLY
                                                    ; series of 1 tile at (2,4)
                                                    ; done
                                                    ; enemies: 1
                                                    ; $03 (3) at (14,11), range (0,0), moving l 0
                                                    ; arrows: no, no

room_14_data                                        ; (Top Landing)
    !byte $58, $56, $19, $27, $b0, $a5, $0a, $f0, $a3, $24, $27, $dd, $45, $65, $e7, $9f ; items: 1 (1)
    !byte $06, $16, $0b, $cb, $0e, $14, $fc, $40, $9e, $7b, $f3, $d7, $5f, $f3, $38, $fd ; exits: left: $13, right: $15, up: $0c, down: $1c
    !byte $0a, $10, $40, $b2, $0d, $f2, $45, $9c, $20, $f2, $24, $51, $a7, $13, $19, $0e ; conveyor: right, slope: /, rope: no
    !byte $df, $98, $b1, $4b, $17, $90, $3d, $a6, $d8, $20, $bb, $86, $0c, $21, $31, $65 ; tiles: $92 (2), $93 (1), $14 (3), $3f (0), $40 (0), $95
    !byte $fd, $aa, $af, $02                        ; screen colours: 0 5 3 7
                                                    ; title tab 10, text "Top Landing"
                                                    ; use WALL
                                                    ; move to (0,15)
                                                    ; block, width 1, to y 3
                                                    ; block, width 29, to y 14
                                                    ; block, width 31, to y 13
                                                    ; move to (31,10)
                                                    ; block, width 30, to y 3
                                                    ; horizontal line, length 23
                                                    ; slope \, length 4
                                                    ; use PLATFORM
                                                    ; move to (0,0)
                                                    ; horizontal line, length 19
                                                    ; move to (22,0)
                                                    ; horizontal line, length 31
                                                    ; move to (2,3)
                                                    ; horizontal line, length 16
                                                    ; move to (2,7)
                                                    ; horizontal line, length 18
                                                    ; move to (2,11)
                                                    ; horizontal line, length 23
                                                    ; use DEADLY
                                                    ; move to (6,1)
                                                    ; block, width 7, to y 13
                                                    ; horizontal line, length 12
                                                    ; block, width 13, to y 13
                                                    ; use ITEM
                                                    ; series of 1 tile at (2,6)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $0a (3) at (6,12), range (2,13), moving d 2
                                                    ; $02 (1) at (12,2), range (2,8), moving d 1
                                                    ; $0d (2) at (15,13), range (10,31), moving r 2
                                                    ; arrows: no, no

room_15_data                                        ; (The Bathroom)
    !byte $58, $51, $55, $15, $7d, $26, $0a, $24, $00, $c7, $c5, $7e, $44, $fd, $07, $41 ; items: 1 (1)
    !byte $e6, $d1, $39, $73, $f2, $ab, $12, $b5, $15, $20, $a3, $08, $e8, $87, $79, $2f ; exits: left: $14, right: $15, up: $15, down: $15
    !byte $f8, $81, $2b, $c8, $62, $23, $57, $1a, $ea, $32, $b6, $60, $3a, $5d, $e8, $f4 ; conveyor: left, slope: /, rope: no
    !byte $08, $39, $0b, $00, $d8, $f1, $0c, $2e, $0a ; tiles: $8d (1), $8e (2), $03 (3), $90 (3), $40 (2), $91
                                                    ; screen colours: 0 1 6 7
                                                    ; title tab 10, text "The Bathroom"
                                                    ; horizontal line, length 31
                                                    ; vertical line, length 10
                                                    ; horizontal line, length 17
                                                    ; move to (13,10)
                                                    ; horizontal line, length 0
                                                    ; move to (6,2)
                                                    ; horizontal line, length 8
                                                    ; use WALL
                                                    ; move to (31,0)
                                                    ; block, width 30, to y 15
                                                    ; move to (0,15)
                                                    ; block, width 1, to y 13
                                                    ; move to (0,9)
                                                    ; vertical line, length 3
                                                    ; move to (17,3)
                                                    ; vertical line, length 9
                                                    ; move to (16,10)
                                                    ; slope \, length 3
                                                    ; use CONVEYOR
                                                    ; move to (20,1)
                                                    ; horizontal line, length 23
                                                    ; use ITEM
                                                    ; series of 1 tile at (23,2)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $04 (3) at (28,13), range (0,0), moving l 0
                                                    ; $1c (2) at (15,3), range (0,29), moving l 2
                                                    ; arrows: no, no

room_16_data                                        ; (Halfway up the East Wall)
    !byte $a0, $6a, $9c, $37, $5c, $a5, $a5, $24, $89, $a3, $a3, $ee, $01, $38, $d0, $b4 ; items: 0
    !byte $81, $71, $8b, $bf, $ff, $11, $90, $f2, $6b, $40, $eb, $03, $07, $be, $cc, $47 ; exits: left: $15, right: $16, up: $0e, down: $1e
    !byte $da, $68, $50, $fd, $e8, $95, $ed, $a7, $94, $f5, $09, $b0, $2a, $81, $11, $12 ; conveyor: right, slope: \, rope: no
    !byte $aa, $c4, $69, $91, $45, $d8, $b0, $1e, $d2, $d4, $90, $40, $01 ; tiles: $8a (1), $8b (1), $23 (3), $49 (1), $4a (0), $4b
                                                    ; screen colours: 0 6 3 7
                                                    ; title tab 0, text "Halfway up the East Wall"
                                                    ; use WALL
                                                    ; block, width 1, to y 15
                                                    ; move to (6,7)
                                                    ; block, width 9, to y 6
                                                    ; block, width 11, to y 0
                                                    ; move to (10,15)
                                                    ; block, width 11, to y 13
                                                    ; move to (6,13)
                                                    ; triangle /, length 10
                                                    ; move to (9,10)
                                                    ; triangle /, length 8
                                                    ; use PLATFORM
                                                    ; series of 6 tiles at (9,0) (6,2) (2,4) (5,5) (4,7) (5,10)
                                                    ; use DEADLY
                                                    ; series of 2 tiles at (1,11) (1,10)
                                                    ; done
                                                    ; enemies: 1
                                                    ; $0b (2) at (5,6), range (2,8), moving l 2
                                                    ; arrows: no, no

room_17_data                                        ; (West Bedroom)
    !byte $a0, $1b, $bc, $8f, $bc, $05, $05, $1e, $f8, $ee, $ef, $3c, $42, $1a, $49, $f9 ; items: 0
    !byte $41, $82, $a3, $73, $e6, $40, $23, $4d, $80, $a8, $12, $c3, $4f, $0c, $b0, $2a ; exits: left: $17, right: $18, up: $0f, down: $1f
    !byte $55, $b9, $6a, $b9, $ea, $6d, $fa, $39, $3a, $a5, $de, $3f, $39, $38, $eb, $11 ; conveyor: left, slope: /, rope: no
    !byte $a5, $05, $a8, $94, $e9, $18, $a8, $29    ; tiles: $ee (3), $ef (2), $3e (3), $f0 (1), $40 (2), $41
                                                    ; screen colours: 0 1 6 3
                                                    ; title tab 4, text "West Bedroom"
                                                    ; use WALL
                                                    ; move to (17,2)
                                                    ; block, width 16, to y 0
                                                    ; horizontal line, length 10
                                                    ; vertical line, length 4
                                                    ; move to (16,15)
                                                    ; block, width 17, to y 8
                                                    ; use PLATFORM
                                                    ; series of 6 tiles at (9,5) (10,7) (10,11) (9,13) (10,15)
                                                    ; (13,9)
                                                    ; move to (31,3)
                                                    ; horizontal line, length 11
                                                    ; horizontal line, length 20
                                                    ; vertical line, length 15
                                                    ; move to (31,12)
                                                    ; horizontal line, length 28
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 26
                                                    ; done
                                                    ; enemies: 2
                                                    ; $0a (2) at (11,4), range (0,10), moving u 2
                                                    ; $19 (1) at (14,3), range (0,10), moving d 1
                                                    ; arrows: no, no

room_18_data                                        ; (West Wing)
    !byte $a0, $9b, $42, $90, $dc, $04, $05, $f8, $f1, $6e, $6f, $1c, $a1, $1b, $49, $f9 ; items: 0
    !byte $35, $61, $d9, $81, $92, $1f, $5a, $06, $f8, $f0, $7c, $00, $29, $5a, $0e, $10 ; exits: left: $17, right: $19, up: $10, down: $20
    !byte $4c, $b0, $ff, $af, $3c, $96, $88, $01, $00, $c6, $9d, $02, $77, $4a, $44, $01 ; conveyor: right, slope: /, rope: no
    !byte $83, $06                                  ; tiles: $ec (2), $ed (1), $1e (3), $3f (1), $40 (2), $41
                                                    ; screen colours: 0 2 4 3
                                                    ; title tab 11, text "West Wing"
                                                    ; use WALL
                                                    ; move to (4,15)
                                                    ; block, width 5, to y 10
                                                    ; move to (16,0)
                                                    ; triangle /, length 3
                                                    ; block, width 31, to y 0
                                                    ; use PLATFORM
                                                    ; horizontal line, length 20
                                                    ; move to (13,3)
                                                    ; horizontal line, length 0
                                                    ; move to (0,12)
                                                    ; horizontal line, length 3
                                                    ; move to (31,15)
                                                    ; slope \, length 4
                                                    ; done
                                                    ; enemies: 3
                                                    ; $12 (3) at (4,6), range (0,0), moving l 0
                                                    ; $07 (2) at (14,5), range (0,14), moving d 4
                                                    ; $24 (3) at (8,10), range (0,12), moving l 2
                                                    ; arrows: no, no

room_19_data                                        ; (Swimming Pool)
    !byte $60, $58, $a2, $d9, $cc, $a4, $a5, $24, $ab, $c3, $c3, $3c, $a2, $52, $13, $c6 ; items: 0
    !byte $08, $cb, $9e, $77, $4e, $9f, $f9, $0c, $e7, $b0, $87, $bf, $90, $13, $30, $98 ; exits: left: $18, right: $1a, up: $11, down: $19
    !byte $1f, $aa, $7a, $a9, $43, $03              ; conveyor: right, slope: /, rope: yes
                                                    ; tiles: $86 (2), $87 (1), $ab (2), $49 (1), $4a (2), $4b
                                                    ; screen colours: 0 1 6 3
                                                    ; title tab 10, text "Swimming Pool"
                                                    ; block, width 31, to y 3
                                                    ; use WALL
                                                    ; block, width 28, to y 3
                                                    ; move to (28,3)
                                                    ; triangle \, length 0
                                                    ; horizontal line, length 28
                                                    ; horizontal line, length 0
                                                    ; block, width 3, to y 3
                                                    ; done
                                                    ; enemies: 1
                                                    ; $15 (3) at (11,13), range (5,14), moving l 2
                                                    ; arrows: no, no

room_1a_data                                        ; (The Banyan Tree)
    !byte $d8, $b4, $a5, $28, $b9, $85, $4a, $49, $02, $07, $05, $3e, $84, $ff, $07, $81 ; items: 1 (1)
    !byte $1d, $c0, $be, $1c, $09, $39, $70, $18, $17, $67, $cd, $87, $a4, $52, $bd, $15 ; exits: left: $19, right: $1b, up: $12, down: $22
    !byte $6b, $bc, $58, $a9, $c5, $32, $2d, $d6, $5e, $7d, $4c, $95, $ba, $af, $00, $05 ; conveyor: right, slope: /, rope: no
    !byte $64, $cc, $64, $ed, $7e, $3a, $31, $be, $d2, $54, $15, $74, $41, $e0, $13, $ad ; tiles: $81 (2), $82 (1), $03 (3), $49 (1), $4a (2), $85
    !byte $55, $fe, $68, $42, $39, $53, $33, $cc, $3a, $55, $49, $34, $14, $55, $71, $00 ; screen colours: 0 1 4 7
                                                    ; title tab 7, text "The Banyan Tree"
                                                    ; use WALL
                                                    ; block, width 6, to y 3
                                                    ; vertical line, length 3
                                                    ; horizontal line, length 26
                                                    ; block, width 31, to y 0
                                                    ; horizontal line, length 18
                                                    ; vertical line, length 5
                                                    ; move to (15,6)
                                                    ; vertical line, length 3
                                                    ; move to (12,7)
                                                    ; vertical line, length 3
                                                    ; move to (9,5)
                                                    ; vertical line, length 3
                                                    ; move to (6,5)
                                                    ; vertical line, length 3
                                                    ; move to (13,14)
                                                    ; vertical line, length 15
                                                    ; horizontal line, length 12
                                                    ; vertical line, length 10
                                                    ; move to (11,11)
                                                    ; slope \, length 4
                                                    ; use PLATFORM
                                                    ; move to (8,0)
                                                    ; horizontal line, length 24
                                                    ; block, width 25, to y 3
                                                    ; move to (13,13)
                                                    ; triangle /, length 11
                                                    ; horizontal line, length 17
                                                    ; horizontal line, length 15
                                                    ; vertical line, length 9
                                                    ; move to (18,10)
                                                    ; vertical line, length 8
                                                    ; use ITEM
                                                    ; series of 1 tile at (8,1)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $16 (3) at (22,10), range (19,31), moving l 2
                                                    ; $08 (2) at (10,7), range (6,10), moving d 1
                                                    ; $06 (1) at (13,7), range (5,10), moving u 2
                                                    ; $05 (3) at (16,10), range (5,10), moving u 1
                                                    ; arrows: no, no

room_1b_data                                        ; (The Nightmare Room)
    !byte $d8, $72, $ec, $58, $f5, $dd, $4a, $f9, $13, $fb, $fa, $58, $84, $ff, $67, $05 ; items: 1 (1)
    !byte $e3, $d9, $80, $48, $5e, $74, $ce, $1c, $98, $1f, $59, $f8, $e5, $01, $e0, $ff ; exits: left: $1a, right: $1c, up: $1b, down: $23
    !byte $79, $0c, $76, $79, $28, $51, $ae, $ca, $b2, $35, $9b, $a1, $b2, $e6, $68, $d2 ; conveyor: left, slope: \, rope: no
    !byte $bc, $d5, $52, $bc, $b0, $83, $2e, $2c, $7b, $ae, $0b, $06, $3a, $09, $6b, $04 ; tiles: $7c (2), $7d (3), $23 (3), $7f (2), $4a (2), $ed
    !byte $76, $06, $ba, $02, $f6, $0c, $47, $83, $a6, $0b, $17, $02, $36, $05, $9f, $04 ; screen colours: 0 1 2 3
    !byte $f6, $08, $77, $04, $76, $0e              ; title tab 7, text "The Nightmare Room"
                                                    ; use WALL
                                                    ; horizontal line, length 31
                                                    ; horizontal line, length 9
                                                    ; vertical line, length 1
                                                    ; triangle \, length 3
                                                    ; block, width 0, to y 0
                                                    ; move to (31,15)
                                                    ; block, width 30, to y 3
                                                    ; use PLATFORM
                                                    ; series of 14 tiles at (7,8) (10,4) (10,7) (10,10) (13,3)
                                                    ; (13,6) (13,9) (16,10) (19,5) (19,8)
                                                    ; (22,4) (22,7) (22,10) (26,5)
                                                    ; use CONVEYOR
                                                    ; series of 1 tile at (27,8)
                                                    ; use ITEM
                                                    ; series of 1 tile at (26,6)
                                                    ; done
                                                    ; enemies: 7
                                                    ; $17 (1) at (8,3), range (0,11), moving u 2
                                                    ; $03 (2) at (11,1), range (0,13), moving d 1
                                                    ; $01 (3) at (14,10), range (0,13), moving d 4
                                                    ; $03 (1) at (17,6), range (1,12), moving u 7
                                                    ; $03 (2) at (20,2), range (0,13), moving u 2
                                                    ; $03 (1) at (28,9), range (0,13), moving d 4
                                                    ; $03 (3) at (23,1), range (0,13), moving d 1
                                                    ; arrows: no, no

room_1c_data                                        ; (First Landing)
    !byte $60, $bb, $4a, $92, $3d, $bd, $bc, $24, $f1, $3c, $3d, $1e, $21, $a8, $88, $29 ; items: 0
    !byte $3f, $0d, $2c, $16, $96, $1d, $28, $e0, $81, $ef, $f8, $99, $e2, $87, $19, $08 ; exits: left: $1b, right: $1d, up: $14, down: $24
    !byte $96, $1f, $1e, $5c, $38, $30, $d5, $fe, $17, $89, $77, $2a, $16, $5f, $9f, $7e ; conveyor: right, slope: /, rope: no
    !byte $a8, $ce, $19, $5f, $09                   ; tiles: $78 (1), $79 (2), $1e (3), $49 (1), $7a (3), $7a
                                                    ; screen colours: 0 2 4 7
                                                    ; title tab 8, text "First Landing"
                                                    ; use WALL
                                                    ; move to (0,3)
                                                    ; block, width 1, to y 15
                                                    ; move to (24,15)
                                                    ; block, width 25, to y 4
                                                    ; move to (31,0)
                                                    ; block, width 24, to y 1
                                                    ; use PLATFORM
                                                    ; series of 4 tiles at (30,1) (28,1) (26,1) (24,1)
                                                    ; horizontal line, length 21
                                                    ; move to (23,15)
                                                    ; slope \, length 1
                                                    ; use DEADLY
                                                    ; move to (29,12)
                                                    ; vertical line, length 8
                                                    ; series of 2 tiles at (30,11) (28,11)
                                                    ; done
                                                    ; enemies: 1
                                                    ; $15 (1) at (25,12), range (24,31), moving r 2
                                                    ; arrows: no, no

room_1d_data                                        ; (The Chapel)
    !byte $d8, $71, $dd, $14, $b9, $b9, $4b, $49, $02, $bb, $38, $5f, $44, $ff, $87, $38 ; items: 1 (1)
    !byte $f0, $44, $1f, $38, $13, $3d, $30, $17, $e7, $bf, $91, $8e, $24, $7f, $a2, $04 ; exits: left: $1c, right: $1d, up: $1d, down: $25
    !byte $78, $a9, $82, $2e, $dc, $7c, $86, $b3, $60, $3a, $a5, $9a, $01, $01, $89, $c5 ; conveyor: left, slope: /, rope: no
    !byte $a0, $2a, $ee, $4f, $03, $66, $16, $6c, $03, $66, $16, $ae, $40, $6e, $06 ; tiles: $73 (2), $74 (1), $03 (3), $49 (1), $4a (2), $77
                                                    ; screen colours: 0 1 2 7
                                                    ; title tab 11, text "The Chapel"
                                                    ; use WALL
                                                    ; block, width 25, to y 1
                                                    ; move to (28,0)
                                                    ; block, width 29, to y 1
                                                    ; block, width 31, to y 15
                                                    ; move to (17,2)
                                                    ; slope /, length 4
                                                    ; horizontal line, length 19
                                                    ; triangle /, length 8
                                                    ; vertical line, length 4
                                                    ; use PLATFORM
                                                    ; move to (29,2)
                                                    ; vertical line, length 8
                                                    ; use ITEM
                                                    ; series of 1 tile at (29,9)
                                                    ; done
                                                    ; enemies: 6
                                                    ; $07 (2) at (6,8), range (6,11), moving u 2
                                                    ; $15 (1) at (12,12), range (0,16), moving l 2
                                                    ; $06 (3) at (17,8), range (5,10), moving u 1
                                                    ; $1f (2) at (25,6), range (0,12), moving d 1
                                                    ; $20 (2) at (27,6), range (0,12), moving d 1
                                                    ; $21 (2) at (26,8), range (2,14), moving d 1
                                                    ; arrows: no, no

room_1e_data                                        ; (East Wall Base)
    !byte $e0, $79, $5a, $96, $bc, $a5, $a5, $24, $25, $9c, $1c, $27, $22, $09, $48, $f9 ; items: 0
    !byte $35, $a0, $f5, $83, $20, $91, $03, $07, $be, $0a, $46, $ab, $ea, $47, $07, $d8 ; exits: left: $1e, right: $1e, up: $16, down: $26
    !byte $20, $20, $91, $11, $15, $a9, $cc, $51, $b0, $92, $fd, $c8, $e3, $03, $ed, $1f ; conveyor: right, slope: /, rope: no
    !byte $c7, $09, $6c, $14                        ; tiles: $71 (3), $72 (2), $48 (3), $49 (1), $4a (2), $4b
                                                    ; screen colours: 0 1 2 6
                                                    ; title tab 9, text "East Wall Base"
                                                    ; use WALL
                                                    ; block, width 1, to y 15
                                                    ; move to (10,0)
                                                    ; block, width 11, to y 5
                                                    ; move to (10,15)
                                                    ; block, width 11, to y 8
                                                    ; use PLATFORM
                                                    ; series of 9 tiles at (4,0) (9,1) (6,2) (5,4) (9,5) (6,7) (2,8)
                                                    ; (6,10) (9,11)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $1e (3) at (7,12), range (1,13), moving d 7
                                                    ; $07 (1) at (3,9), range (0,13), moving u 1
                                                    ; arrows: no, no

room_1f_data                                        ; (Back Door)
    !byte $e0, $07, $fa, $98, $dc, $a4, $a5, $ae, $03, $ae, $2e, $5f, $61, $20, $40, $ea ; items: 0
    !byte $61, $e7, $e2, $81, $86, $9f, $18, $46, $18, $27, $91, $1f, $01, $f9, $d8, $0f ; exits: left: $1f, right: $20, up: $17, down: $31
    !byte $49, $0f, $00                             ; conveyor: right, slope: /, rope: no
                                                    ; tiles: $e9 (2), $ea (1), $80 (3), $eb (1), $4a (2), $4b
                                                    ; screen colours: 0 2 5 7
                                                    ; title tab 12, text "Back Door"
                                                    ; use WALL
                                                    ; move to (16,15)
                                                    ; block, width 17, to y 8
                                                    ; move to (17,0)
                                                    ; block, width 14, to y 4
                                                    ; horizontal line, length 9
                                                    ; triangle /, length 4
                                                    ; use PLATFORM
                                                    ; horizontal line, length 31
                                                    ; use CONVEYOR
                                                    ; move to (31,0)
                                                    ; horizontal line, length 18
                                                    ; done
                                                    ; enemies: 0
                                                    ; arrows: no, no

room_20_data                                        ; (Back Stairway)
    !byte $e0, $87, $c6, $14, $38, $a5, $a5, $24, $bd, $cf, $cf, $9e, $22, $21, $40, $ea ; items: 0
    !byte $a5, $0c, $44, $6c, $60, $1c, $90, $2f, $90, $7c, $bf, $47, $f9, $2b, $d6, $bf ; exits: left: $1f, right: $21, up: $18, down: $32
    !byte $09, $d0, $7f, $93, $be, $fe, $02, $59, $84, $c0, $e5, $b1, $42, $18, $c8, $95 ; conveyor: right, slope: /, rope: no
    !byte $95, $cc, $4c, $34, $57, $57, $7f, $15    ; tiles: $e6 (1), $e7 (2), $7b (3), $49 (0), $4a (0), $4b
                                                    ; screen colours: 0 5 4 7
                                                    ; title tab 9, text "Back Stairway"
                                                    ; use PLATFORM
                                                    ; horizontal line, length 31
                                                    ; move to (0,4)
                                                    ; horizontal line, length 31
                                                    ; move to (31,7)
                                                    ; horizontal line, length 10
                                                    ; move to (31,10)
                                                    ; horizontal line, length 13
                                                    ; move to (31,13)
                                                    ; horizontal line, length 16
                                                    ; use WALL
                                                    ; move to (31,14)
                                                    ; block, width 18, to y 15
                                                    ; vertical line, length 15
                                                    ; slope \, length 0
                                                    ; use DEADLY
                                                    ; series of 2 tiles at (1,0) (7,4)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $14 (2) at (4,3), range (0,9), moving d 2
                                                    ; $1a (3) at (18,6), range (12,25), moving l 2
                                                    ; $0e (2) at (21,13), range (11,31), moving r 2
                                                    ; arrows: no, no

room_21_data                                        ; (Cold Store)
    !byte $f2, $41, $64, $86, $dd, $dd, $c1, $5e, $52, $c2, $ce, $f6, $55, $1a, $39, $8d ; items: 4 (1111)
    !byte $5f, $ca, $2e, $92, $03, $f3, $67, $39, $08, $10, $48, $a8, $c0, $43, $05, $15 ; exits: left: $20, right: $22, up: $19, down: $21
    !byte $2e, $d8, $60, $2b, $a7, $91, $55, $fe, $92, $ed, $95, $19, $b7, $87, $2e, $33 ; conveyor: right, slope: /, rope: yes
    !byte $61, $2e, $0a, $ef, $93, $d4, $2f, $98, $c8, $08, $27, $60, $ea, $14, $19, $10 ; tiles: $6d (3), $6e (1), $48 (3), $49 (1), $6f (3), $70
    !byte $c8, $88, $33, $d0, $2a, $00              ; screen colours: 4 2 5 7
                                                    ; title tab 11, text "Cold Store"
                                                    ; use WALL
                                                    ; horizontal line, length 31
                                                    ; block, width 26, to y 7
                                                    ; use PLATFORM
                                                    ; horizontal line, length 0
                                                    ; move to (0,4)
                                                    ; horizontal line, length 5
                                                    ; move to (0,7)
                                                    ; horizontal line, length 5
                                                    ; move to (0,10)
                                                    ; horizontal line, length 7
                                                    ; move to (0,13)
                                                    ; horizontal line, length 3
                                                    ; move to (21,3)
                                                    ; horizontal line, length 22
                                                    ; use DEADLY
                                                    ; series of 6 tiles at (7,15) (9,3) (13,14) (20,12) (24,14)
                                                    ; (27,12)
                                                    ; use ITEM
                                                    ; series of 4 tiles at (6,4) (6,7) (8,10) (3,13)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $25 (1) at (15,13), range (0,25), moving l 2
                                                    ; $22 (3) at (3,9), range (0,6), moving r 2
                                                    ; $25 (1) at (2,6), range (0,8), moving l 2
                                                    ; $22 (2) at (7,3), range (0,11), moving r 2
                                                    ; arrows: no, no

room_22_data                                        ; (West of Kitchen)
    !byte $10, $c6, $56, $a4, $d4, $a4, $a5, $6c, $f4, $ac, $2c, $3d, $41, $1a, $49, $f9 ; items: 0
    !byte $3a, $fa, $94, $c8, $88, $13, $7b, $e0, $40, $2f, $ff, $40, $40, $3e, $30, $72 ; exits: left: $21, right: $23, up: $1a, down: $22
    !byte $b2, $9f, $73, $8d, $96, $ec, $f7, $5c, $7f, $e5, $ba, $2a, $4d, $5d, $f5, $ab ; conveyor: left, slope: \, rope: no
    !byte $46, $ad, $c6, $6a, $3e, $6c, $1a, $76, $71, $da, $13, $43, $0e, $b0, $6b, $c3 ; tiles: $69 (2), $6a (1), $5e (1), $6c (1), $4a (2), $4b
    !byte $05, $b0, $45, $a3, $0c, $b0, $6b, $63, $0b, $b0, $27, $00 ; screen colours: 0 2 6 3
                                                    ; title tab 4, text "West of Kitchen"
                                                    ; use WALL
                                                    ; block, width 1, to y 7
                                                    ; vertical line, length 7
                                                    ; triangle /, length 0
                                                    ; horizontal line, length 0
                                                    ; horizontal line, length 31
                                                    ; use PLATFORM
                                                    ; move to (17,3)
                                                    ; horizontal line, length 19
                                                    ; move to (31,3)
                                                    ; horizontal line, length 29
                                                    ; move to (17,6)
                                                    ; horizontal line, length 19
                                                    ; move to (31,7)
                                                    ; horizontal line, length 29
                                                    ; move to (31,10)
                                                    ; horizontal line, length 29
                                                    ; move to (26,10)
                                                    ; horizontal line, length 22
                                                    ; move to (11,10)
                                                    ; vertical line, length 15
                                                    ; series of 6 tiles at (12,5) (13,5) (17,10) (22,7) (24,6)
                                                    ; (25,6)
                                                    ; use CONVEYOR
                                                    ; move to (26,3)
                                                    ; horizontal line, length 22
                                                    ; done
                                                    ; enemies: 4
                                                    ; $18 (3) at (9,12), range (0,13), moving d 2
                                                    ; $18 (1) at (14,8), range (0,13), moving u 4
                                                    ; $18 (3) at (20,12), range (0,13), moving d 2
                                                    ; $18 (2) at (27,4), range (0,13), moving d 4
                                                    ; arrows: no, no

room_23_data                                        ; (The Kitchen)
    !byte $10, $25, $76, $1c, $3c, $a5, $a5, $24, $81, $cd, $cd, $1e, $a1, $fe, $53, $22 ; items: 0
    !byte $23, $4e, $ec, $81, $e9, $f3, $d1, $af, $73, $3c, $eb, $e3, $39, $17, $81, $80 ; exits: left: $22, right: $24, up: $1b, down: $23
    !byte $63, $05, $1e, $21, $a8, $58, $23, $25, $6b, $2d, $7a, $21, $05, $11, $e3, $90 ; conveyor: right, slope: /, rope: no
    !byte $51, $e2, $a8, $79, $62, $60, $01, $f6, $64, $c8, $01, $76, $6d, $78, $07, $b6 ; tiles: $66 (1), $67 (2), $03 (3), $49 (1), $4a (0), $4b
    !byte $68, $14, $01, $f6, $04                   ; screen colours: 0 2 4 7
                                                    ; title tab 10, text "The Kitchen"
                                                    ; use WALL
                                                    ; horizontal line, length 23
                                                    ; block, width 31, to y 1
                                                    ; move to (31,5)
                                                    ; block, width 28, to y 7
                                                    ; horizontal line, length 26
                                                    ; triangle /, length 7
                                                    ; horizontal line, length 28
                                                    ; slope \, length 1
                                                    ; use PLATFORM
                                                    ; move to (0,3)
                                                    ; horizontal line, length 13
                                                    ; move to (0,7)
                                                    ; horizontal line, length 8
                                                    ; move to (0,10)
                                                    ; horizontal line, length 13
                                                    ; move to (17,2)
                                                    ; horizontal line, length 19
                                                    ; move to (13,6)
                                                    ; horizontal line, length 11
                                                    ; series of 1 tile at (18,8)
                                                    ; use DEADLY
                                                    ; move to (3,1)
                                                    ; block, width 4, to y 12
                                                    ; move to (9,1)
                                                    ; block, width 10, to y 12
                                                    ; done
                                                    ; enemies: 4
                                                    ; $18 (2) at (3,4), range (0,13), moving d 4
                                                    ; $18 (3) at (9,12), range (0,13), moving d 2
                                                    ; $18 (1) at (15,7), range (0,13), moving u 4
                                                    ; $18 (2) at (20,4), range (0,13), moving d 4
                                                    ; arrows: no, no

room_24_data                                        ; (To the Kitchens    Main Stairway)
    !byte $74, $9c, $3a, $c9, $7e, $37, $35, $36, $21, $37, $32, $bc, $19, $c8, $ee, $fe ; items: 2 (11)
    !byte $a7, $44, $46, $9c, $d8, $f4, $de, $7b, $06, $08, $fb, $52, $06, $22, $36, $30 ; exits: left: $23, right: $25, up: $1c, down: $24
    !byte $0e, $9c, $8f, $02, $1d, $e8, $8a, $af, $55, $68, $55, $24, $48, $f5, $57, $b6 ; conveyor: right, slope: \, rope: no
    !byte $c7, $32, $44, $1e, $be, $c2, $4b, $b9, $f6, $ac, $45, $f1, $a2, $77, $e7, $7e ; tiles: $61 (3), $62 (1), $27 (3), $64 (3), $63 (3), $65
    !byte $b9, $bf, $88, $4c, $26, $59, $d8, $43, $17, $91, $c9, $7c, $c6, $d5, $01, $15 ; screen colours: 4 1 3 7
    !byte $ed, $e0, $44, $5c, $99, $05, $b6, $0d, $45, $63, $06, $46, $69, $05, $d3, $13 ; title tab 0, text "To the Kitchens    Main Stairway"
    !byte $6d, $a9, $94, $09, $05                   ; use WALL
                                                    ; block, width 31, to y 1
                                                    ; move to (0,5)
                                                    ; block, width 1, to y 7
                                                    ; move to (8,15)
                                                    ; vertical line, length 13
                                                    ; move to (8,5)
                                                    ; vertical line, length 10
                                                    ; horizontal line, length 9
                                                    ; use PLATFORM
                                                    ; horizontal line, length 21
                                                    ; move to (31,10)
                                                    ; horizontal line, length 27
                                                    ; move to (28,6)
                                                    ; horizontal line, length 24
                                                    ; move to (2,7)
                                                    ; horizontal line, length 7
                                                    ; series of 5 tiles at (7,10) (10,7) (11,7) (19,5) (20,5)
                                                    ; use CONVEYOR
                                                    ; series of 2 tiles at (15,7) (14,7)
                                                    ; move to (31,4)
                                                    ; slope \, length 15
                                                    ; series of 2 tiles at (2,6) (9,9)
                                                    ; use DEADLY
                                                    ; series of 1 tile at (27,12)
                                                    ; use ITEM
                                                    ; series of 2 tiles at (2,6) (9,9)
                                                    ; done
                                                    ; enemies: 6
                                                    ; $0e (3) at (21,12), range (0,21), moving l 2
                                                    ; $1c (1) at (3,9), range (2,7), moving r 2
                                                    ; $26 (2) at (16,3), range (13,22), moving l 2
                                                    ; $0b (1) at (3,3), range (0,12), moving r 2
                                                    ; $1a (3) at (16,6), range (11,25), moving l 2
                                                    ; $1a (2) at (10,9), range (9,18), moving l 2
                                                    ; arrows: no, no

room_25_data                                        ; (Ballroom West)
    !byte $fe, $4f, $32, $37, $5d, $9f, $06, $52, $fa, $54, $3a, $da, $16, $91, $10, $68 ; items: 7 (1111111)
    !byte $1d, $9d, $33, $af, $91, $94, $0f, $cc, $f7, $ff, $bc, $55, $e4, $48, $01, $02 ; exits: left: $24, right: $26, up: $1d, down: $25
    !byte $cc, $f7, $7b, $86, $bf, $02, $04, $7a, $08, $1b, $28, $9b, $ae, $45, $4e, $5c ; conveyor: right, slope: \, rope: no
    !byte $b8, $71, $e7, $c9, $9b, $1f, $7b, $ac, $98, $4e, $79, $2e, $98, $59, $db, $ad ; tiles: $5b (1), $5c (2), $2a (3), $5f (3), $4a (2), $60
    !byte $c3, $46, $02                             ; screen colours: 0 1 2 3
                                                    ; title tab 9, text "Ballroom West"
                                                    ; use WALL
                                                    ; horizontal line, length 31
                                                    ; move to (31,15)
                                                    ; block, width 30, to y 13
                                                    ; move to (8,9)
                                                    ; block, width 9, to y 4
                                                    ; use PLATFORM
                                                    ; move to (0,1)
                                                    ; horizontal line, length 31
                                                    ; move to (31,7)
                                                    ; horizontal line, length 24
                                                    ; move to (31,10)
                                                    ; horizontal line, length 0
                                                    ; move to (0,5)
                                                    ; slope /, length 2
                                                    ; use CONVEYOR
                                                    ; move to (16,2)
                                                    ; horizontal line, length 27
                                                    ; use ITEM
                                                    ; series of 7 tiles at (17,3) (18,3) (20,3) (22,3) (23,3) (25,3)
                                                    ; (27,3)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $1e (2) at (6,10), range (6,11), moving u 2
                                                    ; $1e (3) at (14,8), range (6,12), moving d 2
                                                    ; $1b (1) at (22,11), range (16,27), moving l 2
                                                    ; arrows: no, no

room_26_data                                        ; (Ballroom East)
    !byte $90, $e6, $5e, $9e, $dc, $a4, $a5, $24, $25, $34, $35, $ce, $21, $21, $d0, $3a ; items: 0
    !byte $3a, $67, $1e, $01, $29, $1f, $38, $1f, $fd, $15, $a7, $ae, $48, $f5, $8f, $5a ; exits: left: $25, right: $27, up: $1e, down: $27
    !byte $c1, $0f, $5c, $20, $a8, $c8, $22, $bf, $47, $4a, $be, $ea, $a9, $47, $8b, $9b ; conveyor: right, slope: /, rope: no
    !byte $92, $c7, $83, $9b, $75, $32, $ca, $3d, $b4, $a7, $4b, $9a, $29, $64, $08, $b1 ; tiles: $58 (2), $59 (1), $48 (3), $49 (1), $4a (2), $4b
    !byte $19                                       ; screen colours: 0 6 1 7
                                                    ; title tab 9, text "Ballroom East"
                                                    ; use WALL
                                                    ; block, width 31, to y 1
                                                    ; move to (31,10)
                                                    ; horizontal line, length 14
                                                    ; move to (11,10)
                                                    ; horizontal line, length 9
                                                    ; move to (11,15)
                                                    ; block, width 10, to y 13
                                                    ; move to (0,15)
                                                    ; block, width 1, to y 13
                                                    ; use PLATFORM
                                                    ; move to (0,10)
                                                    ; horizontal line, length 9
                                                    ; vertical line, length 2
                                                    ; move to (31,7)
                                                    ; horizontal line, length 9
                                                    ; move to (4,15)
                                                    ; vertical line, length 10
                                                    ; done
                                                    ; enemies: 5
                                                    ; $1e (2) at (5,10), range (7,12), moving u 4
                                                    ; $1e (3) at (7,8), range (7,12), moving d 2
                                                    ; $24 (3) at (24,10), range (14,30), moving l 2
                                                    ; $1e (1) at (11,10), range (9,12), moving d 1
                                                    ; $02 (2) at (12,2), range (2,6), moving d 1
                                                    ; arrows: no, no

room_27_data                                        ; (The Hall)
    !byte $90, $15, $de, $bc, $5c, $a5, $99, $25, $79, $18, $18, $2c, $62, $fe, $e3, $40 ; items: 0
    !byte $eb, $03, $e7, $a3, $a0, $52, $a7, $49, $be, $c0, $0f, $91, $25, $41, $86, $22 ; exits: left: $26, right: $28, up: $1e, down: $33
    !byte $3d, $4e, $72, $c9, $82, $d6, $33, $d3, $8f, $92, $94, $01, $00, $de, $78, $04 ; conveyor: right, slope: \, rope: no
                                                    ; tiles: $30 (1), $30 (1), $3c (3), $49 (1), $33 (2), $4b
                                                    ; screen colours: 0 1 2 3
                                                    ; title tab 12, text "The Hall"
                                                    ; use WALL
                                                    ; block, width 31, to y 1
                                                    ; move to (0,10)
                                                    ; horizontal line, length 21
                                                    ; block, width 22, to y 4
                                                    ; horizontal line, length 31
                                                    ; move to (0,7)
                                                    ; slope /, length 2
                                                    ; use DEADLY
                                                    ; series of 3 tiles at (8,2) (12,2) (17,2)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $24 (3) at (19,10), range (9,20), moving l 2
                                                    ; $17 (2) at (19,3), range (5,31), moving l 2
                                                    ; $12 (3) at (10,6), range (0,0), moving l 0
                                                    ; arrows: yes (11,0), yes (14,1)

room_28_data                                        ; (The Front Door)
    !byte $38, $2f, $8a, $65, $b9, $33, $4a, $49, $52, $31, $88, $05, $5c, $fe, $47, $a3 ; items: 1 (1)
    !byte $b3, $f9, $61, $e7, $e2, $81, $03, $f1, $a2, $a0, $a2, $e9, $82, $ee, $07, $00 ; exits: left: $27, right: $28, up: $28, down: $34
                                                    ; conveyor: right, slope: \, rope: no
                                                    ; tiles: $46 (3), $30 (1), $2a (3), $49 (1), $4a (2), $31
                                                    ; screen colours: 6 1 0 4
                                                    ; title tab 9, text "The Front Door"
                                                    ; use WALL
                                                    ; block, width 1, to y 1
                                                    ; slope \, length 1
                                                    ; move to (0,10)
                                                    ; horizontal line, length 11
                                                    ; use ITEM
                                                    ; series of 1 tile at (11,11)
                                                    ; done
                                                    ; enemies: 0
                                                    ; arrows: no, no

room_29_data                                        ; (Out on a limb)
    !byte $74, $51, $95, $75, $34, $e5, $96, $92, $e4, $e0, $e2, $bc, $88, $70, $25, $5f ; items: 2 (11)
    !byte $67, $2f, $b8, $5a, $18, $78, $a0, $95, $66, $61, $96, $9f, $41, $12, $72, $42 ; exits: left: $28, right: $2a, up: $29, down: $2b
    !byte $da, $25, $a3, $5c, $d3, $e9, $e1, $5d, $a4, $98, $68, $32, $11, $a8, $42, $b3 ; conveyor: right, slope: /, rope: no
    !byte $01, $57, $01, $53, $16, $eb, $39, $9d, $2e, $a2, $a4, $f7, $38, $49, $ee, $06 ; tiles: $39 (1), $3a (1), $38 (2), $49 (1), $4a (1), $3b
    !byte $52, $2b, $95, $bf, $ca, $33, $0d, $6c, $19 ; screen colours: 0 1 2 7
                                                    ; title tab 8, text "Out on a limb"
                                                    ; use WALL
                                                    ; move to (21,2)
                                                    ; block, width 26, to y 1
                                                    ; horizontal line, length 26
                                                    ; move to (31,3)
                                                    ; use PLATFORM
                                                    ; horizontal line, length 18
                                                    ; use SLOPE
                                                    ; move to (25,0)
                                                    ; horizontal line, length 22
                                                    ; slope \, length 2
                                                    ; move to (17,4)
                                                    ; slope \, length 6
                                                    ; move to (14,5)
                                                    ; slope /, length 3
                                                    ; series of 14 tiles at (2,5) (3,2) (5,9) (6,4) (8,1) (10,8)
                                                    ; (11,3) (12,0) (14,10) (16,1) (18,9)
                                                    ; (20,6) (23,9) (25,7)
                                                    ; use ITEM
                                                    ; series of 2 tiles at (2,9) (5,14)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $24 (1) at (18,7), range (14,24), moving l 2
                                                    ; $16 (2) at (20,10), range (19,31), moving r 2
                                                    ; $1e (3) at (12,11), range (0,13), moving u 4
                                                    ; arrows: no, no

room_2a_data                                        ; (Tree Top)
    !byte $fc, $b2, $aa, $9a, $e9, $c6, $ce, $26, $d9, $ce, $ca, $72, $11, $93, $23, $21 ; items: 3 (111)
    !byte $2f, $3b, $7f, $a0, $09, $8a, $55, $50, $0c, $02, $c4, $16, $aa, $c8, $28, $2d ; exits: left: $29, right: $2a, up: $2a, down: $2c
    !byte $c5, $1d, $48, $d8, $b6, $ee, $3c, $64, $b4, $64, $05, $2b, $56, $69, $d2, $7c ; conveyor: right, slope: \, rope: no
    !byte $d0, $24, $22, $85, $a2, $c2, $f0, $75, $80, $10, $10, $21, $c4, $48, $88, $93 ; tiles: $34 (2), $35 (1), $b7 (3), $49 (1), $36 (1), $37
    !byte $20, $ba, $14, $b7, $4d, $a6, $c7, $09, $17, $20, $d0, $7a, $27, $fa, $91, $31 ; screen colours: 0 1 2 7
    !byte $2f, $50, $d0, $1d, $00                   ; title tab 12, text "Tree Top"
                                                    ; use WALL
                                                    ; move to (18,0)
                                                    ; vertical line, length 3
                                                    ; move to (10,0)
                                                    ; vertical line, length 3
                                                    ; use PLATFORM
                                                    ; horizontal line, length 0
                                                    ; move to (3,6)
                                                    ; horizontal line, length 5
                                                    ; move to (8,9)
                                                    ; horizontal line, length 10
                                                    ; move to (13,2)
                                                    ; horizontal line, length 14
                                                    ; slope /, length 0
                                                    ; horizontal line, length 16
                                                    ; series of 12 tiles at (13,7) (14,7) (16,9) (17,6) (18,6)
                                                    ; (20,1) (21,1) (21,4) (22,4) (22,7)
                                                    ; (24,2) (25,2)
                                                    ; use DEADLY
                                                    ; move to (5,0)
                                                    ; vertical line, length 2
                                                    ; vertical line, length 1
                                                    ; horizontal line, length 7
                                                    ; series of 8 tiles at (0,1) (1,0) (2,2) (2,1) (3,1) (4,2) (7,2)
                                                    ; (8,2)
                                                    ; use ITEM
                                                    ; series of 3 tiles at (17,13) (22,12) (19,2)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $24 (3) at (7,4), range (0,8), moving l 2
                                                    ; $17 (1) at (23,2), range (5,31), moving l 2
                                                    ; $23 (3) at (7,10), range (0,20), moving l 2
                                                    ; arrows: yes (7,0), no

room_2b_data                                        ; (On a Branch Over the Drive)
    !byte $b8, $68, $ca, $35, $b9, $d2, $d1, $4a, $c6, $d3, $50, $5f, $0c, $3b, $7b, $c1 ; items: 1 (1)
    !byte $83, $11, $58, $c4, $9f, $ab, $24, $de, $ff, $70, $14, $95, $1c, $e0, $8f, $c4 ; exits: left: $28, right: $2c, up: $29, down: $35
    !byte $2b, $b1, $da, $8c, $96, $70, $a8, $9a, $a2, $88, $32, $46, $55, $8c, $d5, $27 ; conveyor: right, slope: /, rope: no
    !byte $5b, $ba, $db, $67, $69, $ce, $a2, $c8, $69, $70, $a9, $f8, $f2, $65, $74, $81 ; tiles: $2b (1), $2c (1), $8f (3), $49 (1), $2d (2), $2e
    !byte $ca, $13, $32, $6b, $f8, $6a, $85, $97, $b0, $4b, $c7, $39, $e0, $f1, $e2, $95 ; screen colours: 4 1 2 7
    !byte $70, $2b, $5b                             ; title tab 3, text "On a Branch Over the Drive"
                                                    ; use PLATFORM
                                                    ; move to (31,8)
                                                    ; horizontal line, length 17
                                                    ; slope \, length 4
                                                    ; horizontal line, length 13
                                                    ; move to (13,9)
                                                    ; horizontal line, length 11
                                                    ; move to (4,3)
                                                    ; horizontal line, length 5
                                                    ; move to (11,2)
                                                    ; horizontal line, length 10
                                                    ; use DEADLY
                                                    ; move to (9,8)
                                                    ; block, width 10, to y 10
                                                    ; horizontal line, length 12
                                                    ; move to (21,7)
                                                    ; block, width 19, to y 6
                                                    ; horizontal line, length 23
                                                    ; move to (27,7)
                                                    ; block, width 26, to y 5
                                                    ; horizontal line, length 28
                                                    ; series of 2 tiles at (8,9) (25,6)
                                                    ; use WALL
                                                    ; series of 3 tiles at (20,7) (26,7) (26,6)
                                                    ; use ITEM
                                                    ; series of 1 tile at (5,4)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $09 (3) at (19,5), range (16,31), moving r 2
                                                    ; $14 (1) at (7,10), range (8,13), moving d 2
                                                    ; $1c (3) at (14,7), range (0,7), moving u 1
                                                    ; $28 (2) at (30,10), range (8,14), moving d 2
                                                    ; arrows: no, yes (11,2)

room_2c_data                                        ; (Inside the Megatrunk)
    !byte $50, $b7, $d5, $b6, $dd, $a4, $91, $25, $31, $91, $28, $2d, $c2, $84, $4d, $02 ; items: 0
    !byte $93, $fb, $9f, $21, $0c, $e4, $58, $ac, $3a, $50, $10, $51, $05, $26, $28, $ca ; exits: left: $2b, right: $2d, up: $2a, down: $36
    !byte $37, $69, $55, $e6, $09, $d3, $d7, $aa, $be, $9a, $08, $a1, $5c, $02, $e5, $72 ; conveyor: right, slope: \, rope: no
    !byte $28, $07, $bb, $9a, $b4, $eb, $76, $e9, $d3, $89, $17, $3f, $61, $62, $45, $0b ; tiles: $29 (2), $12 (1), $19 (3), $49 (1), $13 (3), $4b
    !byte $16, $20, $c2, $73, $cf, $28, $70, $cb, $84, $2a, $b0, $a8, $64, $75, $78, $a8 ; screen colours: 0 1 2 3
    !byte $38, $73, $fc, $e8, $02, $8d, $70, $cb, $82, $8e, $70, $ab, $42, $8c, $70, $6b ; title tab 6, text "Inside the Megatrunk"
    !byte $00                                       ; use WALL
                                                    ; move to (0,8)
                                                    ; horizontal line, length 10
                                                    ; vertical line, length 0
                                                    ; move to (18,0)
                                                    ; vertical line, length 2
                                                    ; horizontal line, length 31
                                                    ; move to (18,5)
                                                    ; vertical line, length 10
                                                    ; horizontal line, length 25
                                                    ; slope /, length 8
                                                    ; move to (18,15)
                                                    ; vertical line, length 13
                                                    ; move to (10,15)
                                                    ; vertical line, length 11
                                                    ; use DEADLY
                                                    ; move to (1,0)
                                                    ; vertical line, length 7
                                                    ; move to (4,0)
                                                    ; vertical line, length 7
                                                    ; move to (7,0)
                                                    ; vertical line, length 7
                                                    ; use PLATFORM
                                                    ; series of 14 tiles at (11,2) (11,7) (11,11) (14,9) (15,9)
                                                    ; (14,4) (15,4) (15,12) (16,12) (17,10)
                                                    ; (17,6) (16,6) (16,0) (17,0)
                                                    ; done
                                                    ; enemies: 7
                                                    ; $1e (1) at (12,5), range (0,14), moving d 2
                                                    ; $24 (2) at (5,5), range (0,13), moving l 2
                                                    ; $24 (2) at (26,11), range (16,30), moving l 2
                                                    ; $23 (3) at (19,3), range (17,31), moving l 2
                                                    ; $28 (1) at (2,12), range (8,14), moving d 2
                                                    ; $28 (2) at (5,12), range (8,14), moving d 2
                                                    ; $28 (3) at (8,12), range (8,14), moving d 2
                                                    ; arrows: no, no

room_2d_data                                        ; (Cuckoo's Nest)
    !byte $b8, $69, $db, $3d, $bb, $51, $c0, $49, $02, $c3, $c0, $58, $44, $a1, $82, $94 ; items: 1 (1)
    !byte $73, $3b, $3d, $4b, $52, $3e, $40, $c7, $13, $b1, $64, $3c, $5d, $82, $71, $01 ; exits: left: $2c, right: $2d, up: $2d, down: $37
    !byte $c4, $a0, $89, $74, $c1, $c7, $23, $8d, $36, $30, $68, $2e, $84, $c9, $48, $4d ; conveyor: right, slope: /, rope: no
                                                    ; tiles: $0c (2), $0c (1), $03 (3), $49 (1), $0e (3), $28
                                                    ; screen colours: 0 1 2 3
                                                    ; title tab 10, text "Cuckoo's Nest"
                                                    ; use PLATFORM
                                                    ; move to (14,3)
                                                    ; block, width 17, to y 1
                                                    ; vertical line, length 4
                                                    ; block, width 15, to y 2
                                                    ; slope \, length 2
                                                    ; use WALL
                                                    ; horizontal line, length 14
                                                    ; horizontal line, length 0
                                                    ; use DEADLY
                                                    ; move to (16,5)
                                                    ; horizontal line, length 17
                                                    ; use ITEM
                                                    ; series of 1 tile at (15,8)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $16 (3) at (5,11), range (0,12), moving l 2
                                                    ; $0e (1) at (16,8), range (12,19), moving l 2
                                                    ; arrows: no, yes (6,2)

room_2e_data                                        ; (The Bow)
    !byte $b8, $eb, $bb, $6e, $fd, $be, $24, $5c, $04, $3b, $27, $3d, $c2, $fe, $07, $5d ; items: 1 (1)
    !byte $3b, $d0, $61, $55, $20, $3d, $df, $af, $b1, $4b, $29, $96, $4f, $27, $89, $38 ; exits: left: $2e, right: $2f, up: $2e, down: $2e
    !byte $df, $80, $d7, $e8, $c2, $f6, $47, $59, $e7, $f6, $d1, $74, $de, $f8, $51, $00 ; conveyor: right, slope: \, rope: no
                                                    ; tiles: $92 (1), $73 (3), $83 (3), $e8 (3), $90 (2), $f4
                                                    ; screen colours: 0 2 4 7
                                                    ; title tab 13, text "The Bow"
                                                    ; use WALL
                                                    ; move to (24,6)
                                                    ; vertical line, length 10
                                                    ; use PLATFORM
                                                    ; horizontal line, length 23
                                                    ; horizontal line, length 31
                                                    ; move to (31,5)
                                                    ; horizontal line, length 13
                                                    ; series of 3 tiles at (18,8) (26,7) (25,7)
                                                    ; use DEADLY
                                                    ; horizontal line, length 17
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 31
                                                    ; move to (16,1)
                                                    ; slope \, length 6
                                                    ; use ITEM
                                                    ; series of 1 tile at (27,7)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $26 (3) at (23,3), range (22,31), moving l 2
                                                    ; $0b (2) at (19,13), range (17,31), moving l 2
                                                    ; arrows: no, no

room_2f_data                                        ; (The Yacht)
    !byte $b8, $1b, $fa, $5e, $76, $8f, $4c, $ce, $07, $63, $ff, $79, $44, $ff, $37, $00 ; items: 1 (1)
    !byte $e2, $f9, $c0, $e4, $29, $8a, $f3, $fd, $0a, $d2, $8b, $04, $15, $76, $34, $20 ; exits: left: $2e, right: $30, up: $2f, down: $2f
    !byte $b8, $10, $9a, $34, $b4, $8a, $2c, $79, $d3, $56, $8c, $2e, $58, $7c, $a4, $89 ; conveyor: left, slope: \, rope: no
    !byte $25, $1e, $29, $d7, $e2, $36, $05         ; tiles: $fe (3), $1b (2), $83 (3), $cf (2), $c9 (1), $c4
                                                    ; screen colours: 0 1 6 3
                                                    ; title tab 11, text "The Yacht"
                                                    ; use WALL
                                                    ; horizontal line, length 19
                                                    ; block, width 20, to y 5
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 31
                                                    ; move to (31,5)
                                                    ; use PLATFORM
                                                    ; horizontal line, length 23
                                                    ; vertical line, length 2
                                                    ; move to (0,10)
                                                    ; horizontal line, length 6
                                                    ; slope /, length 5
                                                    ; horizontal line, length 0
                                                    ; horizontal line, length 3
                                                    ; vertical line, length 1
                                                    ; use WALL
                                                    ; move to (18,5)
                                                    ; horizontal line, length 5
                                                    ; vertical line, length 10
                                                    ; use DEADLY
                                                    ; series of 3 tiles at (15,6) (11,6) (20,6)
                                                    ; use ITEM
                                                    ; series of 1 tile at (13,1)
                                                    ; done
                                                    ; enemies: 2
                                                    ; $16 (1) at (8,13), range (4,15), moving l 2
                                                    ; $13 (2) at (21,10), range (7,13), moving u 2
                                                    ; arrows: no, no

room_30_data                                        ; (The Beach)
    !byte $b8, $1f, $87, $81, $9b, $fd, $c2, $ff, $7c, $7f, $7d, $de, $cb, $fc, $07, $09 ; items: 1 (1)
    !byte $40, $fc, $e0, $50, $30, $1d, $e1, $7c, $17, $68, $28, $5a, $a0, $48, $96, $05 ; exits: left: $2f, right: $31, up: $30, down: $30
    !byte $59, $8a, $54, $89, $2e, $34, $7a, $00    ; conveyor: left, slope: /, rope: yes
                                                    ; tiles: $f9 (2), $fa (1), $fb (2), $fc (1), $0f (3), $fd
                                                    ; screen colours: 4 6 3 7
                                                    ; title tab 12, text "The Beach"
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 5
                                                    ; use PLATFORM
                                                    ; block, width 23, to y 1
                                                    ; use WALL
                                                    ; block, width 31, to y 7
                                                    ; move to (0,5)
                                                    ; horizontal line, length 5
                                                    ; use SLOPE
                                                    ; series of 1 tile at (5,1)
                                                    ; use DEADLY
                                                    ; series of 4 tiles at (8,2) (13,2) (17,2) (21,2)
                                                    ; use ITEM
                                                    ; series of 1 tile at (22,2)
                                                    ; done
                                                    ; enemies: 0
                                                    ; arrows: no, no

room_31_data                                        ; (Tool Shed)
    !byte $78, $98, $fc, $31, $b5, $9f, $1e, $9f, $e0, $1d, $1d, $4e, $44, $65, $e7, $f4 ; items: 1 (1)
    !byte $4b, $9c, $e0, $03, $87, $39, $ce, $84, $b3, $7d, $7e, $f9, $37, $71, $d4, $ab ; exits: left: $30, right: $32, up: $1f, down: $31
    !byte $fe, $bb, $48, $3e, $37, $c0, $86, $14, $2d, $c6, $bd, $47, $29, $5c, $7c, $d0 ; conveyor: right, slope: /, rope: no
    !byte $50, $b2, $10, $86, $2e, $70, $7c, $4c, $06, $e3, $01, $a5, $85, $e5, $1d, $c9 ; tiles: $e1 (3), $e2 (1), $1e (3), $e4 (2), $e3 (2), $e5
    !byte $ca, $e4, $45, $0d                        ; screen colours: 0 1 2 6
                                                    ; title tab 10, text "Tool Shed"
                                                    ; use WALL
                                                    ; block, width 6, to y 7
                                                    ; use CONVEYOR
                                                    ; horizontal line, length 25
                                                    ; use WALL
                                                    ; block, width 27, to y 7
                                                    ; block, width 31, to y 10
                                                    ; move to (31,13)
                                                    ; horizontal line, length 17
                                                    ; block, width 10, to y 15
                                                    ; move to (10,15)
                                                    ; triangle \, length 13
                                                    ; use SLOPE
                                                    ; move to (7,12)
                                                    ; slope \, length 8
                                                    ; use PLATFORM
                                                    ; series of 9 tiles at (9,4) (11,4) (12,7) (15,7) (17,4) (20,3)
                                                    ; (20,7) (24,2) (24,5)
                                                    ; use DEADLY
                                                    ; series of 1 tile at (16,12)
                                                    ; use ITEM
                                                    ; series of 1 tile at (7,1)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $09 (2) at (16,6), range (7,16), moving l 2
                                                    ; $16 (1) at (16,13), range (7,23), moving l 2
                                                    ; $0d (3) at (9,9), range (7,20), moving r 2
                                                    ; arrows: no, no

room_32_data                                        ; (The Wine Cellar)
    !byte $f6, $8f, $73, $30, $e5, $ca, $ad, $8d, $cd, $80, $f5, $35, $8f, $88, $ff, $9a ; items: 6 (111111)
    !byte $b0, $e4, $21, $a2, $35, $88, $07, $0e, $ac, $c1, $32, $0c, $33, $e7, $d0, $fc ; exits: left: $31, right: $33, up: $20, down: $32
    !byte $77, $ff, $9c, $ad, $ca, $76, $7b, $ae, $c8, $07, $57, $98, $ac, $02, $4a, $c2 ; conveyor: right, slope: /, rope: no
    !byte $b0, $03, $0f, $e7, $97, $80, $64, $8b, $67, $b9, $2a, $55, $b0, $21, $ab, $be ; tiles: $d6 (1), $d7 (2), $80 (2), $d9 (2), $d8 (3), $da
    !byte $4c, $79, $37, $ee, $c5, $08, $59, $f6, $6c, $38, $73, $7b, $ba, $8a, $94, $10 ; screen colours: 0 1 6 3
    !byte $89, $13, $47, $4f, $3f, $51, $2b, $83, $83, $54, $95, $91, $83, $52, $53, $a2 ; title tab 8, text "The Wine Cellar"
    !byte $83, $d6, $c2, $f2, $8e, $04              ; use WALL
                                                    ; block, width 1, to y 10
                                                    ; block, width 3, to y 4
                                                    ; block, width 6, to y 1
                                                    ; horizontal line, length 25
                                                    ; block, width 28, to y 2
                                                    ; block, width 31, to y 15
                                                    ; move to (27,15)
                                                    ; block, width 28, to y 13
                                                    ; vertical line, length 10
                                                    ; horizontal line, length 27
                                                    ; move to (27,7)
                                                    ; horizontal line, length 29
                                                    ; move to (2,7)
                                                    ; block, width 3, to y 10
                                                    ; horizontal line, length 6
                                                    ; move to (6,10)
                                                    ; horizontal line, length 0
                                                    ; vertical line, length 4
                                                    ; horizontal line, length 6
                                                    ; use CONVEYOR
                                                    ; move to (24,1)
                                                    ; slope /, length 3
                                                    ; horizontal line, length 31
                                                    ; vertical line, length 4
                                                    ; use PLATFORM
                                                    ; horizontal line, length 19
                                                    ; move to (20,7)
                                                    ; horizontal line, length 26
                                                    ; move to (26,10)
                                                    ; horizontal line, length 21
                                                    ; move to (0,13)
                                                    ; horizontal line, length 4
                                                    ; series of 6 tiles at (15,10) (12,10) (15,7) (12,7) (15,4)
                                                    ; (12,4)
                                                    ; use DEADLY
                                                    ; series of 4 tiles at (15,3) (12,3) (19,3) (22,15)
                                                    ; use ITEM
                                                    ; series of 6 tiles at (2,5) (4,2) (4,8) (28,8) (28,5) (28,11)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $15 (1) at (21,3), range (0,28), moving l 2
                                                    ; $15 (2) at (10,6), range (4,28), moving l 2
                                                    ; $15 (3) at (18,9), range (2,28), moving l 2
                                                    ; $16 (1) at (16,13), range (7,23), moving l 2
                                                    ; arrows: no, no

room_33_data                                        ; (The Forgotten Abbey)
    !byte $78, $5a, $f2, $59, $5e, $aa, $ab, $a8, $a9, $2a, $2b, $bd, $82, $fd, $47, $5d ; items: 1 (1)
    !byte $64, $2e, $67, $62, $1f, $80, $90, $8c, $03, $07, $fe, $60, $cc, $f7, $ff, $3c ; exits: left: $32, right: $34, up: $27, down: $33
    !byte $1e, $78, $c5, $60, $a0, $88, $e8, $a0, $4c, $72, $97, $af, $21, $c5, $8a, $0a ; conveyor: left, slope: \, rope: no
    !byte $4b, $22, $97, $2c, $cb, $0d, $3b, $36, $3a, $5d, $40, $f3, $5c, $e5, $4b, $2c ; tiles: $52 (1), $53 (2), $55 (2), $56 (3), $54 (1), $57
    !byte $52, $35, $ab, $32, $4a, $4d, $eb, $07, $5a, $1d, $db, $be, $52, $55, $29, $36 ; screen colours: 0 2 5 7
    !byte $4a, $15, $4a, $2a, $5a, $f5, $2a, $2f, $0a ; title tab 6, text "The Forgotten Abbey"
                                                    ; use WALL
                                                    ; block, width 1, to y 15
                                                    ; block, width 3, to y 1
                                                    ; horizontal line, length 31
                                                    ; move to (31,15)
                                                    ; block, width 30, to y 3
                                                    ; block, width 1, to y 14
                                                    ; vertical line, length 3
                                                    ; use PLATFORM
                                                    ; block, width 1, to y 4
                                                    ; move to (2,2)
                                                    ; slope /, length 1
                                                    ; move to (6,4)
                                                    ; horizontal line, length 29
                                                    ; series of 4 tiles at (29,6) (2,5) (3,5) (2,10)
                                                    ; use CONVEYOR
                                                    ; move to (4,8)
                                                    ; horizontal line, length 29
                                                    ; use DEADLY
                                                    ; series of 4 tiles at (9,13) (16,13) (24,13) (17,7)
                                                    ; use ITEM
                                                    ; series of 1 tile at (2,12)
                                                    ; done
                                                    ; enemies: 7
                                                    ; $15 (1) at (7,13), range (4,13), moving l 2
                                                    ; $15 (2) at (12,13), range (10,19), moving l 2
                                                    ; $15 (3) at (18,13), range (15,24), moving l 2
                                                    ; $15 (1) at (24,13), range (22,31), moving r 2
                                                    ; $15 (2) at (10,9), range (8,27), moving l 2
                                                    ; $15 (3) at (8,5), range (4,21), moving l 2
                                                    ; $15 (2) at (15,5), range (9,29), moving l 2
                                                    ; arrows: no, no

room_34_data                                        ; (The Security Guard)
    !byte $30, $af, $c5, $b5, $3c, $a5, $a5, $f0, $ad, $71, $71, $1e, $c1, $ff, $4b, $04 ; items: 0
    !byte $95, $28, $f2, $78, $ac, $80, $88, $0f, $0c, $94, $41, $de, $7c, $f4, $db, $1c ; exits: left: $33, right: $35, up: $28, down: $3a
    !byte $9d, $c5, $76, $9b, $c2, $46, $2b, $d6, $59, $b1, $da, $46, $72, $a8, $e0, $ab ; conveyor: right, slope: \, rope: no
    !byte $06, $59, $d8, $f7, $85, $7f, $02, $48, $3d, $5a, $e7, $e9, $7e, $cf, $c2, $7e ; tiles: $1c (1), $1d (2), $6b (3), $1f (1), $4a (2), $4b
    !byte $ca, $7b, $52, $9a, $66, $76, $5a, $fa, $a0, $76, $55, $26, $67, $f6, $5c, $8e ; screen colours: 0 2 4 7
    !byte $66, $76, $09                             ; title tab 7, text "The Security Guard"
                                                    ; use WALL
                                                    ; horizontal line, length 1
                                                    ; move to (6,0)
                                                    ; horizontal line, length 30
                                                    ; block, width 31, to y 1
                                                    ; move to (31,6)
                                                    ; block, width 28, to y 5
                                                    ; block, width 26, to y 3
                                                    ; move to (23,6)
                                                    ; block, width 20, to y 3
                                                    ; move to (17,6)
                                                    ; vertical line, length 3
                                                    ; move to (14,6)
                                                    ; vertical line, length 3
                                                    ; move to (11,6)
                                                    ; block, width 9, to y 3
                                                    ; horizontal line, length 5
                                                    ; move to (0,15)
                                                    ; vertical line, length 10
                                                    ; block, width 2, to y 6
                                                    ; horizontal line, length 6
                                                    ; triangle \, length 15
                                                    ; move to (1,15)
                                                    ; slope /, length 8
                                                    ; use PLATFORM
                                                    ; move to (5,7)
                                                    ; horizontal line, length 11
                                                    ; move to (14,7)
                                                    ; horizontal line, length 23
                                                    ; move to (31,7)
                                                    ; horizontal line, length 26
                                                    ; use CONVEYOR
                                                    ; move to (31,2)
                                                    ; horizontal line, length 30
                                                    ; done
                                                    ; enemies: 4
                                                    ; $29 (1) at (12,11), range (6,13), moving d 1
                                                    ; $29 (2) at (15,8), range (5,13), moving d 2
                                                    ; $29 (3) at (18,7), range (6,13), moving d 4
                                                    ; $29 (1) at (24,11), range (6,13), moving d 2
                                                    ; arrows: no, no

room_35_data                                        ; (The Drive)
    !byte $b0, $6c, $f5, $3d, $fc, $a4, $a5, $f0, $33, $71, $71, $66, $62, $fe, $c3, $51 ; items: 0
    !byte $54, $72, $e0, $20, $2b, $ff, $40, $3e, $c8, $b0, $42, $94, $c0, $83, $88, $40 ; exits: left: $34, right: $36, up: $2b, down: $3b
    !byte $06, $f2, $60, $c0, $02, $0a, $7c, $ca, $f9, $d5, $5f, $9d, $d4, $0e, $0f, $99 ; conveyor: right, slope: \, rope: no
    !byte $a4, $72, $4f, $95, $f0, $64, $0f, $95, $64, $05, $1f, $09 ; tiles: $1c (2), $1d (3), $99 (3), $1f (1), $4a (0), $4b
                                                    ; screen colours: 0 1 3 6
                                                    ; title tab 12, text "The Drive"
                                                    ; use WALL
                                                    ; block, width 2, to y 6
                                                    ; vertical line, length 7
                                                    ; triangle /, length 0
                                                    ; horizontal line, length 31
                                                    ; use PLATFORM
                                                    ; horizontal line, length 24
                                                    ; move to (21,0)
                                                    ; horizontal line, length 10
                                                    ; move to (0,7)
                                                    ; horizontal line, length 2
                                                    ; use DEADLY
                                                    ; move to (0,4)
                                                    ; block, width 1, to y 3
                                                    ; block, width 3, to y 0
                                                    ; use CONVEYOR
                                                    ; move to (0,2)
                                                    ; horizontal line, length 1
                                                    ; done
                                                    ; enemies: 5
                                                    ; $0e (3) at (15,13), range (11,31), moving r 2
                                                    ; $24 (1) at (21,11), range (16,30), moving l 2
                                                    ; $24 (2) at (18,10), range (14,30), moving r 2
                                                    ; $24 (2) at (7,9), range (6,30), moving l 2
                                                    ; $24 (1) at (19,5), range (0,31), moving l 2
                                                    ; arrows: no, no

room_36_data                                        ; (At the Foot of the Megatree)
    !byte $fc, $75, $6f, $9e, $ed, $86, $8a, $2c, $d9, $8e, $84, $68, $11, $04, $f2, $fd ; items: 3 (111)
    !byte $8f, $3a, $97, $af, $a3, $f7, $3f, $43, $18, $c8, $91, $90, $03, $f2, $d5, $1a ; exits: left: $35, right: $37, up: $2c, down: $3c
    !byte $7b, $28, $41, $3f, $89, $fa, $8a, $5d, $8e, $11, $2d, $98, $6e, $e8, $8f, $a4 ; conveyor: right, slope: \, rope: no
    !byte $62, $7f, $27, $d5, $d7, $e5, $ab, $be, $98, $08, $bf, $54, $f2, $65, $f2, $2f ; tiles: $11 (2), $12 (1), $b7 (3), $49 (1), $13 (3), $15
    !byte $a5, $4b, $50, $88, $72, $79, $a2, $89, $25, $1e, $55, $20, $a7, $36, $59, $50 ; screen colours: 0 1 2 3
    !byte $c7, $36, $59, $88, $c2, $26, $05         ; title tab 2, text "At the Foot of the Megatree"
                                                    ; use PLATFORM
                                                    ; horizontal line, length 31
                                                    ; move to (11,5)
                                                    ; horizontal line, length 13
                                                    ; slope /, length 2
                                                    ; horizontal line, length 16
                                                    ; move to (15,12)
                                                    ; horizontal line, length 17
                                                    ; move to (15,10)
                                                    ; horizontal line, length 13
                                                    ; series of 4 tiles at (17,8) (17,6) (16,6) (11,11)
                                                    ; use WALL
                                                    ; move to (31,8)
                                                    ; horizontal line, length 18
                                                    ; vertical line, length 3
                                                    ; move to (31,11)
                                                    ; horizontal line, length 18
                                                    ; vertical line, length 15
                                                    ; vertical line, length 14
                                                    ; horizontal line, length 31
                                                    ; move to (10,15)
                                                    ; vertical line, length 3
                                                    ; use DEADLY
                                                    ; move to (1,15)
                                                    ; vertical line, length 5
                                                    ; move to (4,15)
                                                    ; vertical line, length 6
                                                    ; move to (7,15)
                                                    ; vertical line, length 5
                                                    ; use ITEM
                                                    ; series of 3 tiles at (1,4) (4,5) (7,4)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $16 (2) at (8,13), range (4,15), moving l 2
                                                    ; $28 (1) at (2,7), range (5,13), moving u 2
                                                    ; $28 (1) at (5,7), range (3,13), moving u 2
                                                    ; $28 (2) at (8,10), range (3,12), moving u 2
                                                    ; arrows: no, no

room_37_data                                        ; (Under the Megatree)
    !byte $78, $3b, $da, $3d, $83, $21, $c0, $c1, $c0, $c0, $c2, $5c, $84, $17, $8b, $49 ; items: 1 (1)
    !byte $bc, $ff, $19, $c2, $40, $8e, $84, $1c, $22, $ff, $c8, $31, $ab, $fb, $f1, $97 ; exits: left: $36, right: $38, up: $2d, down: $37
    !byte $38, $69, $97, $ec, $e5, $4b, $0b, $f2, $77, $79, $89, $92, $ae, $5c, $a7, $75 ; conveyor: right, slope: /, rope: no
    !byte $57, $d1, $53, $b6, $ea, $61, $37, $6c, $5c, $28, $88, $30, $41, $87, $08, $2e ; tiles: $0c (2), $0d (1), $0c (0), $0c (0), $0e (3), $10
    !byte $92, $2e, $b4, $7f, $ec, $b9, $62, $e6, $a8, $6f, $a6, $1f, $69, $fb, $05, $1f ; screen colours: 0 1 2 7
    !byte $0d                                       ; title tab 7, text "Under the Megatree"
                                                    ; use DEADLY
                                                    ; move to (7,15)
                                                    ; horizontal line, length 9
                                                    ; block, width 12, to y 13
                                                    ; move to (14,15)
                                                    ; block, width 15, to y 14
                                                    ; horizontal line, length 17
                                                    ; block, width 18, to y 13
                                                    ; series of 3 tiles at (13,14) (19,14) (18,13)
                                                    ; use PLATFORM
                                                    ; horizontal line, length 31
                                                    ; series of 14 tiles at (7,10) (8,10) (9,7) (10,7) (11,9) (13,7)
                                                    ; (14,10) (17,7) (18,9) (22,10) (23,8)
                                                    ; (13,13) (16,13) (17,13)
                                                    ; use WALL
                                                    ; move to (0,8)
                                                    ; horizontal line, length 6
                                                    ; move to (0,11)
                                                    ; horizontal line, length 4
                                                    ; move to (0,14)
                                                    ; horizontal line, length 9
                                                    ; use ITEM
                                                    ; series of 1 tile at (22,15)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $1e (1) at (14,10), range (6,12), moving d 4
                                                    ; $17 (1) at (27,3), range (5,31), moving l 2
                                                    ; $1b (3) at (15,13), range (0,31), moving l 2
                                                    ; arrows: no, no

room_38_data                                        ; (The Bridge)
    !byte $b0, $9f, $c7, $91, $54, $a5, $21, $24, $03, $c0, $c1, $3e, $21, $ff, $83, $51 ; items: 0
    !byte $60, $46, $0e, $0c, $fb, $f0, $68, $30, $f2, $24, $f8, $00, $48, $cb, $17, $40 ; exits: left: $37, right: $39, up: $38, down: $38
    !byte $38, $31, $c0, $18, $7c, $9c, $88, $02, $0a, $95, $e4, $72, $0f, $ed, $1a, $81 ; conveyor: right, slope: /, rope: no
    !byte $fa, $0b                                  ; tiles: $06 (1), $07 (1), $80 (1), $49 (1), $08 (2), $4b
                                                    ; screen colours: 0 2 6 7
                                                    ; title tab 9, text "The Bridge"
                                                    ; use WALL
                                                    ; horizontal line, length 6
                                                    ; triangle /, length 3
                                                    ; block, width 11, to y 0
                                                    ; move to (17,3)
                                                    ; block, width 18, to y 0
                                                    ; triangle /, length 0
                                                    ; use PLATFORM
                                                    ; horizontal line, length 22
                                                    ; horizontal line, length 31
                                                    ; move to (0,0)
                                                    ; horizontal line, length 7
                                                    ; use DEADLY
                                                    ; move to (16,0)
                                                    ; block, width 12, to y 1
                                                    ; done
                                                    ; enemies: 3
                                                    ; $24 (2) at (8,10), range (0,10), moving l 2
                                                    ; $24 (3) at (19,10), range (14,30), moving l 2
                                                    ; $1d (1) at (12,4), range (1,11), moving d 7
                                                    ; arrows: no, no

room_39_data                                        ; (The Off Licence)
    !byte $f3, $ff, $c7, $79, $9e, $b8, $0d, $14, $08, $04, $18, $10, $e0, $22, $f2, $3f ; items: 12 (111111111111)
    !byte $47, $e9, $d3, $02, $11, $8b, $c8, $81, $7a, $89, $a9, $c9, $2f, $28, $c9, $ba ; exits: left: $38, right: $39, up: $39, down: $39
    !byte $00, $f2, $03, $b0, $cf, $92, $c9, $82, $4b, $ea, $eb, $e4, $c7, $1e, $57, $60 ; conveyor: left, slope: /, rope: no
    !byte $97, $b9, $72, $68, $4f, $d9, $f1, $fc, $d4, $00 ; tiles: $00 (2), $01 (1), $03 (3), $04 (2), $02 (3), $05
                                                    ; screen colours: 0 1 2 7
                                                    ; title tab 9, text "The Off Licence"
                                                    ; use WALL
                                                    ; move to (15,4)
                                                    ; horizontal line, length 12
                                                    ; vertical line, length 12
                                                    ; horizontal line, length 31
                                                    ; vertical line, length 0
                                                    ; vertical line, length 4
                                                    ; horizontal line, length 26
                                                    ; slope \, length 0
                                                    ; use PLATFORM
                                                    ; horizontal line, length 31
                                                    ; horizontal line, length 0
                                                    ; use CONVEYOR
                                                    ; move to (30,6)
                                                    ; horizontal line, length 19
                                                    ; use DEADLY
                                                    ; series of 1 tile at (14,9)
                                                    ; use ITEM
                                                    ; move to (30,11)
                                                    ; horizontal line, length 19
                                                    ; done
                                                    ; enemies: 3
                                                    ; $1e (1) at (7,5), range (0,13), moving d 2
                                                    ; $27 (2) at (10,7), range (1,13), moving d 4
                                                    ; $26 (3) at (28,7), range (19,30), moving r 2
                                                    ; arrows: no, no

room_3a_data                                        ; (Entrance to Hades)
    !byte $70, $5d, $d7, $15, $b1, $a5, $a5, $24, $89, $08, $75, $10, $3a, $89, $cd, $11 ; items: 0
    !byte $58, $44, $6e, $76, $8f, $03, $4c, $d2, $81, $03, $1f, $f8, $29, $b7, $cc, $4d ; exits: left: $3a, right: $3a, up: $3a, down: $3a
    !byte $a5, $4e, $2a, $b5, $51, $99, $91, $ca, $f4, $5c, $aa, $e5, $52, $35, $95, $c9 ; conveyor: right, slope: /, rope: no
    !byte $a9, $6c, $5f, $a8, $14, $a5, $ce, $1c, $25, $cb, $9a, $24, $73, $a6, $6a, $dd ; tiles: $5c (3), $21 (2), $22 (1), $49 (0), $4a (1), $4b
    !byte $16, $2f, $ab, $dd, $5a, $9f, $b1, $b5, $f1, $a6, $ac, $b5, $67, $4a, $6d, $ba ; screen colours: 3 1 4 0
    !byte $a1, $6a, $d0, $0e, $47, $c9, $1a, $1d, $46, $cc, $d8, $70, $e2, $c6, $87, $2e ; title tab 9, text "Entrance to Hades"
    !byte $52, $d4, $78, $ec, $a3, $06, $3a, $1e, $90, $06, $3a, $1e, $e2, $45, $36, $0e ; use WALL
                                                    ; block, width 1, to y 15
                                                    ; use PLATFORM
                                                    ; move to (31,2)
                                                    ; horizontal line, length 29
                                                    ; vertical line, length 6
                                                    ; move to (27,2)
                                                    ; vertical line, length 5
                                                    ; move to (25,2)
                                                    ; vertical line, length 5
                                                    ; move to (22,2)
                                                    ; vertical line, length 6
                                                    ; move to (17,2)
                                                    ; vertical line, length 6
                                                    ; move to (15,3)
                                                    ; vertical line, length 5
                                                    ; move to (13,3)
                                                    ; vertical line, length 5
                                                    ; move to (11,2)
                                                    ; vertical line, length 6
                                                    ; move to (7,2)
                                                    ; vertical line, length 6
                                                    ; series of 16 tiles at (8,5) (9,4) (10,5) (14,6) (14,2) (18,6)
                                                    ; (19,5) (18,4) (19,3) (19,2) (21,6)
                                                    ; (23,6) (26,3) (26,6) (21,11) (22,11)
                                                    ; move to (15,9)
                                                    ; horizontal line, length 13
                                                    ; vertical line, length 13
                                                    ; horizontal line, length 15
                                                    ; move to (18,9)
                                                    ; vertical line, length 13
                                                    ; move to (23,9)
                                                    ; horizontal line, length 20
                                                    ; vertical line, length 13
                                                    ; horizontal line, length 23
                                                    ; move to (16,10)
                                                    ; vertical line, length 12
                                                    ; use SLOPE
                                                    ; series of 13 tiles at (7,1) (9,3) (11,1) (14,1) (17,1) (19,1)
                                                    ; (22,1) (25,1) (27,1) (30,1) (14,8)
                                                    ; (18,8) (21,8)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $1f (3) at (2,11), range (0,11), moving u 1
                                                    ; $20 (3) at (4,11), range (0,11), moving u 1
                                                    ; $21 (3) at (3,13), range (2,13), moving u 1
                                                    ; arrows: no, no

room_3b_data                                        ; (Under the Drive)
    !byte $70, $3d, $eb, $ad, $2d, $17, $27, $16, $8a, $c6, $c7, $1e, $22, $8b, $c5, $24 ; items: 0
    !byte $de, $ff, $70, $14, $95, $1c, $38, $f0, $6b, $3e, $10, $95, $ef, $f8, $59, $3d ; exits: left: $3a, right: $3c, up: $35, down: $3b
    !byte $bf, $e6, $c5, $9c, $04, $06, $8f, $5f, $89, $55, $b2, $66, $9b, $3e, $d8, $af ; conveyor: left, slope: \, rope: no
    !byte $49, $64, $39, $62, $c3, $85, $c5, $1e, $27, $ae, $cd, $43, $32, $2d, $ea, $97 ; tiles: $c6 (1), $c7 (2), $a2 (2), $d0 (1), $c8 (3), $d1
    !byte $2b, $49, $80, $58, $01                   ; screen colours: 0 1 4 7
                                                    ; title tab 9, text "Under the Drive"
                                                    ; use WALL
                                                    ; block, width 1, to y 15
                                                    ; vertical line, length 12
                                                    ; triangle /, length 0
                                                    ; horizontal line, length 10
                                                    ; horizontal line, length 31
                                                    ; move to (24,15)
                                                    ; block, width 26, to y 11
                                                    ; block, width 31, to y 10
                                                    ; block, width 30, to y 8
                                                    ; block, width 28, to y 9
                                                    ; use PLATFORM
                                                    ; move to (16,7)
                                                    ; horizontal line, length 15
                                                    ; series of 5 tiles at (17,10) (20,9) (21,9) (22,12) (23,12)
                                                    ; use CONVEYOR
                                                    ; move to (31,5)
                                                    ; horizontal line, length 18
                                                    ; use DEADLY
                                                    ; series of 4 tiles at (17,1) (22,1) (26,1) (20,6)
                                                    ; done
                                                    ; enemies: 3
                                                    ; $24 (1) at (14,11), range (12,30), moving l 2
                                                    ; $0c (3) at (22,8), range (21,31), moving r 1
                                                    ; $14 (2) at (18,4), range (0,8), moving d 2
                                                    ; arrows: no, no

room_3c_data                                        ; (Tree Root)
    !byte $f4, $fd, $3c, $0f, $72, $5b, $9c, $5b, $c0, $9b, $9d, $f9, $8a, $c9, $91, $90 ; items: 2 (11)
    !byte $17, $9d, $cb, $07, $e6, $67, $14, $7e, $bc, $7e, $1e, $4c, $9b, $29, $3e, $61 ; exits: left: $3b, right: $3c, up: $3c, down: $3c
    !byte $c6, $d4, $a8, $1d, $16, $82, $1f, $1c, $40, $2f, $19, $6a, $8f, $c2, $02, $8d ; conveyor: left, slope: /, rope: no
    !byte $21, $cb, $0c, $35, $7a, $ac, $48, $17, $d5, $dc, $7e, $42, $11, $01, $22, $ed ; tiles: $cc (2), $cd (1), $1e (3), $d0 (1), $ce (2), $d1
    !byte $d9, $64, $76, $65, $a7, $f4, $03, $6d, $ae, $24, $32, $05 ; screen colours: 0 5 6 7
                                                    ; title tab 12, text "Tree Root"
                                                    ; use WALL
                                                    ; horizontal line, length 31
                                                    ; horizontal line, length 24
                                                    ; vertical line, length 1
                                                    ; triangle /, length 7
                                                    ; vertical line, length 15
                                                    ; block, width 30, to y 0
                                                    ; block, width 22, to y 12
                                                    ; block, width 20, to y 7
                                                    ; block, width 16, to y 12
                                                    ; block, width 12, to y 10
                                                    ; block, width 10, to y 13
                                                    ; block, width 6, to y 8
                                                    ; move to (0,15)
                                                    ; block, width 3, to y 8
                                                    ; use PLATFORM
                                                    ; move to (15,4)
                                                    ; horizontal line, length 24
                                                    ; move to (11,7)
                                                    ; horizontal line, length 10
                                                    ; use CONVEYOR
                                                    ; move to (0,5)
                                                    ; horizontal line, length 12
                                                    ; use DEADLY
                                                    ; series of 4 tiles at (6,1) (11,1) (15,1) (21,1)
                                                    ; use ITEM
                                                    ; series of 2 tiles at (10,12) (29,11)
                                                    ; done
                                                    ; enemies: 4
                                                    ; $0a (3) at (4,4), range (0,8), moving u 2
                                                    ; $1e (2) at (13,9), range (6,13), moving d 2
                                                    ; $1b (3) at (18,9), range (15,24), moving l 2
                                                    ; $19 (2) at (26,9), range (4,9), moving u 2
                                                    ; arrows: no, no

room_00_data                                        ; (Game Over screen)
    !byte $86, $fc, $79, $3f, $84, $fc, $00, $00, $06, $3d, $00, $a0, $02 ; enemies: 3
                                                    ; $02 (1) @ (15,14), range (15,15), moving d 0
                                                    ; $02 (3) @ (15,12), range (0,0), moving l 0
                                                    ; $01 (2) @ (15,0), range (0,0), moving r 2

; ***************************************************************************************
entry_point
    ldx #<starRunCommandString                      ;
    ldy #>starRunCommandString                      ; *RUN JSW1.5
    jsr OSCLI                                       ;
starRunCommandString
    !text "R.JSW1.5",$0d                            ;


; [unused]
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00
